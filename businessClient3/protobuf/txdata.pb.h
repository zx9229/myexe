// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: txdata.proto

#ifndef PROTOBUF_INCLUDED_txdata_2eproto
#define PROTOBUF_INCLUDED_txdata_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_txdata_2eproto 

namespace protobuf_txdata_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[18];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_txdata_2eproto
namespace txdata {
class CommonErr;
class CommonErrDefaultTypeInternal;
extern CommonErrDefaultTypeInternal _CommonErr_default_instance_;
class CommonReq;
class CommonReqDefaultTypeInternal;
extern CommonReqDefaultTypeInternal _CommonReq_default_instance_;
class CommonRsp;
class CommonRspDefaultTypeInternal;
extern CommonRspDefaultTypeInternal _CommonRsp_default_instance_;
class ConnectReq;
class ConnectReqDefaultTypeInternal;
extern ConnectReqDefaultTypeInternal _ConnectReq_default_instance_;
class ConnectRsp;
class ConnectRspDefaultTypeInternal;
extern ConnectRspDefaultTypeInternal _ConnectRsp_default_instance_;
class ConnectionInfo;
class ConnectionInfoDefaultTypeInternal;
extern ConnectionInfoDefaultTypeInternal _ConnectionInfo_default_instance_;
class DisconnectedData;
class DisconnectedDataDefaultTypeInternal;
extern DisconnectedDataDefaultTypeInternal _DisconnectedData_default_instance_;
class EchoItem;
class EchoItemDefaultTypeInternal;
extern EchoItemDefaultTypeInternal _EchoItem_default_instance_;
class ExecCmdReq;
class ExecCmdReqDefaultTypeInternal;
extern ExecCmdReqDefaultTypeInternal _ExecCmdReq_default_instance_;
class ExecCmdRsp;
class ExecCmdRspDefaultTypeInternal;
extern ExecCmdRspDefaultTypeInternal _ExecCmdRsp_default_instance_;
class MessageAck;
class MessageAckDefaultTypeInternal;
extern MessageAckDefaultTypeInternal _MessageAck_default_instance_;
class OnlineNotice;
class OnlineNoticeDefaultTypeInternal;
extern OnlineNoticeDefaultTypeInternal _OnlineNotice_default_instance_;
class QueryRecordReq;
class QueryRecordReqDefaultTypeInternal;
extern QueryRecordReqDefaultTypeInternal _QueryRecordReq_default_instance_;
class QueryRecordRsp;
class QueryRecordRspDefaultTypeInternal;
extern QueryRecordRspDefaultTypeInternal _QueryRecordRsp_default_instance_;
class ReportDataItem;
class ReportDataItemDefaultTypeInternal;
extern ReportDataItemDefaultTypeInternal _ReportDataItem_default_instance_;
class SendMailItem;
class SendMailItemDefaultTypeInternal;
extern SendMailItemDefaultTypeInternal _SendMailItem_default_instance_;
class SystemReport;
class SystemReportDefaultTypeInternal;
extern SystemReportDefaultTypeInternal _SystemReport_default_instance_;
class UniKey;
class UniKeyDefaultTypeInternal;
extern UniKeyDefaultTypeInternal _UniKey_default_instance_;
}  // namespace txdata
namespace google {
namespace protobuf {
template<> ::txdata::CommonErr* Arena::CreateMaybeMessage<::txdata::CommonErr>(Arena*);
template<> ::txdata::CommonReq* Arena::CreateMaybeMessage<::txdata::CommonReq>(Arena*);
template<> ::txdata::CommonRsp* Arena::CreateMaybeMessage<::txdata::CommonRsp>(Arena*);
template<> ::txdata::ConnectReq* Arena::CreateMaybeMessage<::txdata::ConnectReq>(Arena*);
template<> ::txdata::ConnectRsp* Arena::CreateMaybeMessage<::txdata::ConnectRsp>(Arena*);
template<> ::txdata::ConnectionInfo* Arena::CreateMaybeMessage<::txdata::ConnectionInfo>(Arena*);
template<> ::txdata::DisconnectedData* Arena::CreateMaybeMessage<::txdata::DisconnectedData>(Arena*);
template<> ::txdata::EchoItem* Arena::CreateMaybeMessage<::txdata::EchoItem>(Arena*);
template<> ::txdata::ExecCmdReq* Arena::CreateMaybeMessage<::txdata::ExecCmdReq>(Arena*);
template<> ::txdata::ExecCmdRsp* Arena::CreateMaybeMessage<::txdata::ExecCmdRsp>(Arena*);
template<> ::txdata::MessageAck* Arena::CreateMaybeMessage<::txdata::MessageAck>(Arena*);
template<> ::txdata::OnlineNotice* Arena::CreateMaybeMessage<::txdata::OnlineNotice>(Arena*);
template<> ::txdata::QueryRecordReq* Arena::CreateMaybeMessage<::txdata::QueryRecordReq>(Arena*);
template<> ::txdata::QueryRecordRsp* Arena::CreateMaybeMessage<::txdata::QueryRecordRsp>(Arena*);
template<> ::txdata::ReportDataItem* Arena::CreateMaybeMessage<::txdata::ReportDataItem>(Arena*);
template<> ::txdata::SendMailItem* Arena::CreateMaybeMessage<::txdata::SendMailItem>(Arena*);
template<> ::txdata::SystemReport* Arena::CreateMaybeMessage<::txdata::SystemReport>(Arena*);
template<> ::txdata::UniKey* Arena::CreateMaybeMessage<::txdata::UniKey>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace txdata {

enum ConnectionInfo_LinkType {
  ConnectionInfo_LinkType_Zero2 = 0,
  ConnectionInfo_LinkType_CONNECT = 1,
  ConnectionInfo_LinkType_ACCEPT = 2,
  ConnectionInfo_LinkType_ConnectionInfo_LinkType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ConnectionInfo_LinkType_ConnectionInfo_LinkType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ConnectionInfo_LinkType_IsValid(int value);
const ConnectionInfo_LinkType ConnectionInfo_LinkType_LinkType_MIN = ConnectionInfo_LinkType_Zero2;
const ConnectionInfo_LinkType ConnectionInfo_LinkType_LinkType_MAX = ConnectionInfo_LinkType_ACCEPT;
const int ConnectionInfo_LinkType_LinkType_ARRAYSIZE = ConnectionInfo_LinkType_LinkType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConnectionInfo_LinkType_descriptor();
inline const ::std::string& ConnectionInfo_LinkType_Name(ConnectionInfo_LinkType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConnectionInfo_LinkType_descriptor(), value);
}
inline bool ConnectionInfo_LinkType_Parse(
    const ::std::string& name, ConnectionInfo_LinkType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConnectionInfo_LinkType>(
    ConnectionInfo_LinkType_descriptor(), name, value);
}
enum MsgType {
  Zero1 = 0,
  ID_MessageAck = 1,
  ID_CommonErr = 2,
  ID_CommonReq = 3,
  ID_CommonRsp = 4,
  ID_ConnectionInfo = 5,
  ID_DisconnectedData = 6,
  ID_ConnectReq = 7,
  ID_ConnectRsp = 8,
  ID_OnlineNotice = 9,
  ID_SystemReport = 10,
  ID_QueryRecordReq = 11,
  ID_QueryRecordRsp = 12,
  ID_ExecCmdReq = 13,
  ID_ExecCmdRsp = 14,
  ID_EchoItem = 15,
  ID_ReportDataItem = 16,
  ID_SendMailItem = 17,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MsgType_IsValid(int value);
const MsgType MsgType_MIN = Zero1;
const MsgType MsgType_MAX = ID_SendMailItem;
const int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgType_descriptor();
inline const ::std::string& MsgType_Name(MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgType_descriptor(), value);
}
inline bool MsgType_Parse(
    const ::std::string& name, MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
// ===================================================================

class UniKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txdata.UniKey) */ {
 public:
  UniKey();
  virtual ~UniKey();

  UniKey(const UniKey& from);

  inline UniKey& operator=(const UniKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UniKey(UniKey&& from) noexcept
    : UniKey() {
    *this = ::std::move(from);
  }

  inline UniKey& operator=(UniKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UniKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UniKey* internal_default_instance() {
    return reinterpret_cast<const UniKey*>(
               &_UniKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(UniKey* other);
  friend void swap(UniKey& a, UniKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UniKey* New() const final {
    return CreateMaybeMessage<UniKey>(NULL);
  }

  UniKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UniKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UniKey& from);
  void MergeFrom(const UniKey& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UniKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string UserID = 1;
  void clear_userid();
  static const int kUserIDFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // int64 MsgNo = 2;
  void clear_msgno();
  static const int kMsgNoFieldNumber = 2;
  ::google::protobuf::int64 msgno() const;
  void set_msgno(::google::protobuf::int64 value);

  // int32 SeqNo = 3;
  void clear_seqno();
  static const int kSeqNoFieldNumber = 3;
  ::google::protobuf::int32 seqno() const;
  void set_seqno(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:txdata.UniKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int64 msgno_;
  ::google::protobuf::int32 seqno_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_txdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MessageAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txdata.MessageAck) */ {
 public:
  MessageAck();
  virtual ~MessageAck();

  MessageAck(const MessageAck& from);

  inline MessageAck& operator=(const MessageAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessageAck(MessageAck&& from) noexcept
    : MessageAck() {
    *this = ::std::move(from);
  }

  inline MessageAck& operator=(MessageAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageAck* internal_default_instance() {
    return reinterpret_cast<const MessageAck*>(
               &_MessageAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MessageAck* other);
  friend void swap(MessageAck& a, MessageAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageAck* New() const final {
    return CreateMaybeMessage<MessageAck>(NULL);
  }

  MessageAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MessageAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MessageAck& from);
  void MergeFrom(const MessageAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string SenderID = 2;
  void clear_senderid();
  static const int kSenderIDFieldNumber = 2;
  const ::std::string& senderid() const;
  void set_senderid(const ::std::string& value);
  #if LANG_CXX11
  void set_senderid(::std::string&& value);
  #endif
  void set_senderid(const char* value);
  void set_senderid(const char* value, size_t size);
  ::std::string* mutable_senderid();
  ::std::string* release_senderid();
  void set_allocated_senderid(::std::string* senderid);

  // string RecverID = 3;
  void clear_recverid();
  static const int kRecverIDFieldNumber = 3;
  const ::std::string& recverid() const;
  void set_recverid(const ::std::string& value);
  #if LANG_CXX11
  void set_recverid(::std::string&& value);
  #endif
  void set_recverid(const char* value);
  void set_recverid(const char* value, size_t size);
  ::std::string* mutable_recverid();
  ::std::string* release_recverid();
  void set_allocated_recverid(::std::string* recverid);

  // .txdata.UniKey Key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  private:
  const ::txdata::UniKey& _internal_key() const;
  public:
  const ::txdata::UniKey& key() const;
  ::txdata::UniKey* release_key();
  ::txdata::UniKey* mutable_key();
  void set_allocated_key(::txdata::UniKey* key);

  // bool TxToRoot = 4;
  void clear_txtoroot();
  static const int kTxToRootFieldNumber = 4;
  bool txtoroot() const;
  void set_txtoroot(bool value);

  // bool IsLog = 5;
  void clear_islog();
  static const int kIsLogFieldNumber = 5;
  bool islog() const;
  void set_islog(bool value);

  // @@protoc_insertion_point(class_scope:txdata.MessageAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr senderid_;
  ::google::protobuf::internal::ArenaStringPtr recverid_;
  ::txdata::UniKey* key_;
  bool txtoroot_;
  bool islog_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_txdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommonErr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txdata.CommonErr) */ {
 public:
  CommonErr();
  virtual ~CommonErr();

  CommonErr(const CommonErr& from);

  inline CommonErr& operator=(const CommonErr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommonErr(CommonErr&& from) noexcept
    : CommonErr() {
    *this = ::std::move(from);
  }

  inline CommonErr& operator=(CommonErr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonErr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonErr* internal_default_instance() {
    return reinterpret_cast<const CommonErr*>(
               &_CommonErr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CommonErr* other);
  friend void swap(CommonErr& a, CommonErr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommonErr* New() const final {
    return CreateMaybeMessage<CommonErr>(NULL);
  }

  CommonErr* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommonErr>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommonErr& from);
  void MergeFrom(const CommonErr& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonErr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ErrMsg = 2;
  void clear_errmsg();
  static const int kErrMsgFieldNumber = 2;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // int32 ErrNo = 1;
  void clear_errno();
  static const int kErrNoFieldNumber = 1;
#ifdef errno
#undef errno
  ::google::protobuf::int32 errno() const;
#endif
  void set_errno(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:txdata.CommonErr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::google::protobuf::int32 errno_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_txdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommonReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txdata.CommonReq) */ {
 public:
  CommonReq();
  virtual ~CommonReq();

  CommonReq(const CommonReq& from);

  inline CommonReq& operator=(const CommonReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommonReq(CommonReq&& from) noexcept
    : CommonReq() {
    *this = ::std::move(from);
  }

  inline CommonReq& operator=(CommonReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonReq* internal_default_instance() {
    return reinterpret_cast<const CommonReq*>(
               &_CommonReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CommonReq* other);
  friend void swap(CommonReq& a, CommonReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommonReq* New() const final {
    return CreateMaybeMessage<CommonReq>(NULL);
  }

  CommonReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommonReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommonReq& from);
  void MergeFrom(const CommonReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string SenderID = 2;
  void clear_senderid();
  static const int kSenderIDFieldNumber = 2;
  const ::std::string& senderid() const;
  void set_senderid(const ::std::string& value);
  #if LANG_CXX11
  void set_senderid(::std::string&& value);
  #endif
  void set_senderid(const char* value);
  void set_senderid(const char* value, size_t size);
  ::std::string* mutable_senderid();
  ::std::string* release_senderid();
  void set_allocated_senderid(::std::string* senderid);

  // string RecverID = 3;
  void clear_recverid();
  static const int kRecverIDFieldNumber = 3;
  const ::std::string& recverid() const;
  void set_recverid(const ::std::string& value);
  #if LANG_CXX11
  void set_recverid(::std::string&& value);
  #endif
  void set_recverid(const char* value);
  void set_recverid(const char* value, size_t size);
  ::std::string* mutable_recverid();
  ::std::string* release_recverid();
  void set_allocated_recverid(::std::string* recverid);

  // bytes ReqData = 10;
  void clear_reqdata();
  static const int kReqDataFieldNumber = 10;
  const ::std::string& reqdata() const;
  void set_reqdata(const ::std::string& value);
  #if LANG_CXX11
  void set_reqdata(::std::string&& value);
  #endif
  void set_reqdata(const char* value);
  void set_reqdata(const void* value, size_t size);
  ::std::string* mutable_reqdata();
  ::std::string* release_reqdata();
  void set_allocated_reqdata(::std::string* reqdata);

  // .txdata.UniKey Key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  private:
  const ::txdata::UniKey& _internal_key() const;
  public:
  const ::txdata::UniKey& key() const;
  ::txdata::UniKey* release_key();
  ::txdata::UniKey* mutable_key();
  void set_allocated_key(::txdata::UniKey* key);

  // .google.protobuf.Timestamp ReqTime = 11;
  bool has_reqtime() const;
  void clear_reqtime();
  static const int kReqTimeFieldNumber = 11;
  private:
  const ::google::protobuf::Timestamp& _internal_reqtime() const;
  public:
  const ::google::protobuf::Timestamp& reqtime() const;
  ::google::protobuf::Timestamp* release_reqtime();
  ::google::protobuf::Timestamp* mutable_reqtime();
  void set_allocated_reqtime(::google::protobuf::Timestamp* reqtime);

  // bool TxToRoot = 4;
  void clear_txtoroot();
  static const int kTxToRootFieldNumber = 4;
  bool txtoroot() const;
  void set_txtoroot(bool value);

  // bool IsLog = 5;
  void clear_islog();
  static const int kIsLogFieldNumber = 5;
  bool islog() const;
  void set_islog(bool value);

  // bool IsSafe = 6;
  void clear_issafe();
  static const int kIsSafeFieldNumber = 6;
  bool issafe() const;
  void set_issafe(bool value);

  // bool IsPush = 7;
  void clear_ispush();
  static const int kIsPushFieldNumber = 7;
  bool ispush() const;
  void set_ispush(bool value);

  // bool UpCache = 8;
  void clear_upcache();
  static const int kUpCacheFieldNumber = 8;
  bool upcache() const;
  void set_upcache(bool value);

  // .txdata.MsgType ReqType = 9;
  void clear_reqtype();
  static const int kReqTypeFieldNumber = 9;
  ::txdata::MsgType reqtype() const;
  void set_reqtype(::txdata::MsgType value);

  // @@protoc_insertion_point(class_scope:txdata.CommonReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr senderid_;
  ::google::protobuf::internal::ArenaStringPtr recverid_;
  ::google::protobuf::internal::ArenaStringPtr reqdata_;
  ::txdata::UniKey* key_;
  ::google::protobuf::Timestamp* reqtime_;
  bool txtoroot_;
  bool islog_;
  bool issafe_;
  bool ispush_;
  bool upcache_;
  int reqtype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_txdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommonRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txdata.CommonRsp) */ {
 public:
  CommonRsp();
  virtual ~CommonRsp();

  CommonRsp(const CommonRsp& from);

  inline CommonRsp& operator=(const CommonRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommonRsp(CommonRsp&& from) noexcept
    : CommonRsp() {
    *this = ::std::move(from);
  }

  inline CommonRsp& operator=(CommonRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonRsp* internal_default_instance() {
    return reinterpret_cast<const CommonRsp*>(
               &_CommonRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CommonRsp* other);
  friend void swap(CommonRsp& a, CommonRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommonRsp* New() const final {
    return CreateMaybeMessage<CommonRsp>(NULL);
  }

  CommonRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommonRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommonRsp& from);
  void MergeFrom(const CommonRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string SenderID = 2;
  void clear_senderid();
  static const int kSenderIDFieldNumber = 2;
  const ::std::string& senderid() const;
  void set_senderid(const ::std::string& value);
  #if LANG_CXX11
  void set_senderid(::std::string&& value);
  #endif
  void set_senderid(const char* value);
  void set_senderid(const char* value, size_t size);
  ::std::string* mutable_senderid();
  ::std::string* release_senderid();
  void set_allocated_senderid(::std::string* senderid);

  // string RecverID = 3;
  void clear_recverid();
  static const int kRecverIDFieldNumber = 3;
  const ::std::string& recverid() const;
  void set_recverid(const ::std::string& value);
  #if LANG_CXX11
  void set_recverid(::std::string&& value);
  #endif
  void set_recverid(const char* value);
  void set_recverid(const char* value, size_t size);
  ::std::string* mutable_recverid();
  ::std::string* release_recverid();
  void set_allocated_recverid(::std::string* recverid);

  // bytes RspData = 10;
  void clear_rspdata();
  static const int kRspDataFieldNumber = 10;
  const ::std::string& rspdata() const;
  void set_rspdata(const ::std::string& value);
  #if LANG_CXX11
  void set_rspdata(::std::string&& value);
  #endif
  void set_rspdata(const char* value);
  void set_rspdata(const void* value, size_t size);
  ::std::string* mutable_rspdata();
  ::std::string* release_rspdata();
  void set_allocated_rspdata(::std::string* rspdata);

  // .txdata.UniKey Key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  private:
  const ::txdata::UniKey& _internal_key() const;
  public:
  const ::txdata::UniKey& key() const;
  ::txdata::UniKey* release_key();
  ::txdata::UniKey* mutable_key();
  void set_allocated_key(::txdata::UniKey* key);

  // .google.protobuf.Timestamp RspTime = 11;
  bool has_rsptime() const;
  void clear_rsptime();
  static const int kRspTimeFieldNumber = 11;
  private:
  const ::google::protobuf::Timestamp& _internal_rsptime() const;
  public:
  const ::google::protobuf::Timestamp& rsptime() const;
  ::google::protobuf::Timestamp* release_rsptime();
  ::google::protobuf::Timestamp* mutable_rsptime();
  void set_allocated_rsptime(::google::protobuf::Timestamp* rsptime);

  // bool TxToRoot = 4;
  void clear_txtoroot();
  static const int kTxToRootFieldNumber = 4;
  bool txtoroot() const;
  void set_txtoroot(bool value);

  // bool IsLog = 5;
  void clear_islog();
  static const int kIsLogFieldNumber = 5;
  bool islog() const;
  void set_islog(bool value);

  // bool IsSafe = 6;
  void clear_issafe();
  static const int kIsSafeFieldNumber = 6;
  bool issafe() const;
  void set_issafe(bool value);

  // bool IsPush = 7;
  void clear_ispush();
  static const int kIsPushFieldNumber = 7;
  bool ispush() const;
  void set_ispush(bool value);

  // .txdata.MsgType RspType = 9;
  void clear_rsptype();
  static const int kRspTypeFieldNumber = 9;
  ::txdata::MsgType rsptype() const;
  void set_rsptype(::txdata::MsgType value);

  // bool UpCache = 8;
  void clear_upcache();
  static const int kUpCacheFieldNumber = 8;
  bool upcache() const;
  void set_upcache(bool value);

  // bool IsLast = 12;
  void clear_islast();
  static const int kIsLastFieldNumber = 12;
  bool islast() const;
  void set_islast(bool value);

  // @@protoc_insertion_point(class_scope:txdata.CommonRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr senderid_;
  ::google::protobuf::internal::ArenaStringPtr recverid_;
  ::google::protobuf::internal::ArenaStringPtr rspdata_;
  ::txdata::UniKey* key_;
  ::google::protobuf::Timestamp* rsptime_;
  bool txtoroot_;
  bool islog_;
  bool issafe_;
  bool ispush_;
  int rsptype_;
  bool upcache_;
  bool islast_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_txdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConnectionInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txdata.ConnectionInfo) */ {
 public:
  ConnectionInfo();
  virtual ~ConnectionInfo();

  ConnectionInfo(const ConnectionInfo& from);

  inline ConnectionInfo& operator=(const ConnectionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectionInfo(ConnectionInfo&& from) noexcept
    : ConnectionInfo() {
    *this = ::std::move(from);
  }

  inline ConnectionInfo& operator=(ConnectionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectionInfo* internal_default_instance() {
    return reinterpret_cast<const ConnectionInfo*>(
               &_ConnectionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ConnectionInfo* other);
  friend void swap(ConnectionInfo& a, ConnectionInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectionInfo* New() const final {
    return CreateMaybeMessage<ConnectionInfo>(NULL);
  }

  ConnectionInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConnectionInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConnectionInfo& from);
  void MergeFrom(const ConnectionInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConnectionInfo_LinkType LinkType;
  static const LinkType Zero2 =
    ConnectionInfo_LinkType_Zero2;
  static const LinkType CONNECT =
    ConnectionInfo_LinkType_CONNECT;
  static const LinkType ACCEPT =
    ConnectionInfo_LinkType_ACCEPT;
  static inline bool LinkType_IsValid(int value) {
    return ConnectionInfo_LinkType_IsValid(value);
  }
  static const LinkType LinkType_MIN =
    ConnectionInfo_LinkType_LinkType_MIN;
  static const LinkType LinkType_MAX =
    ConnectionInfo_LinkType_LinkType_MAX;
  static const int LinkType_ARRAYSIZE =
    ConnectionInfo_LinkType_LinkType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LinkType_descriptor() {
    return ConnectionInfo_LinkType_descriptor();
  }
  static inline const ::std::string& LinkType_Name(LinkType value) {
    return ConnectionInfo_LinkType_Name(value);
  }
  static inline bool LinkType_Parse(const ::std::string& name,
      LinkType* value) {
    return ConnectionInfo_LinkType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string UserID = 1;
  void clear_userid();
  static const int kUserIDFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // string BelongID = 2;
  void clear_belongid();
  static const int kBelongIDFieldNumber = 2;
  const ::std::string& belongid() const;
  void set_belongid(const ::std::string& value);
  #if LANG_CXX11
  void set_belongid(::std::string&& value);
  #endif
  void set_belongid(const char* value);
  void set_belongid(const char* value, size_t size);
  ::std::string* mutable_belongid();
  ::std::string* release_belongid();
  void set_allocated_belongid(::std::string* belongid);

  // string Version = 3;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string ExePath = 6;
  void clear_exepath();
  static const int kExePathFieldNumber = 6;
  const ::std::string& exepath() const;
  void set_exepath(const ::std::string& value);
  #if LANG_CXX11
  void set_exepath(::std::string&& value);
  #endif
  void set_exepath(const char* value);
  void set_exepath(const char* value, size_t size);
  ::std::string* mutable_exepath();
  ::std::string* release_exepath();
  void set_allocated_exepath(::std::string* exepath);

  // string Remark = 7;
  void clear_remark();
  static const int kRemarkFieldNumber = 7;
  const ::std::string& remark() const;
  void set_remark(const ::std::string& value);
  #if LANG_CXX11
  void set_remark(::std::string&& value);
  #endif
  void set_remark(const char* value);
  void set_remark(const char* value, size_t size);
  ::std::string* mutable_remark();
  ::std::string* release_remark();
  void set_allocated_remark(::std::string* remark);

  // .txdata.ConnectionInfo.LinkType LinkMode = 4;
  void clear_linkmode();
  static const int kLinkModeFieldNumber = 4;
  ::txdata::ConnectionInfo_LinkType linkmode() const;
  void set_linkmode(::txdata::ConnectionInfo_LinkType value);

  // int32 ExePid = 5;
  void clear_exepid();
  static const int kExePidFieldNumber = 5;
  ::google::protobuf::int32 exepid() const;
  void set_exepid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:txdata.ConnectionInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr belongid_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr exepath_;
  ::google::protobuf::internal::ArenaStringPtr remark_;
  int linkmode_;
  ::google::protobuf::int32 exepid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_txdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DisconnectedData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txdata.DisconnectedData) */ {
 public:
  DisconnectedData();
  virtual ~DisconnectedData();

  DisconnectedData(const DisconnectedData& from);

  inline DisconnectedData& operator=(const DisconnectedData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DisconnectedData(DisconnectedData&& from) noexcept
    : DisconnectedData() {
    *this = ::std::move(from);
  }

  inline DisconnectedData& operator=(DisconnectedData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DisconnectedData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisconnectedData* internal_default_instance() {
    return reinterpret_cast<const DisconnectedData*>(
               &_DisconnectedData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(DisconnectedData* other);
  friend void swap(DisconnectedData& a, DisconnectedData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DisconnectedData* New() const final {
    return CreateMaybeMessage<DisconnectedData>(NULL);
  }

  DisconnectedData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DisconnectedData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DisconnectedData& from);
  void MergeFrom(const DisconnectedData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisconnectedData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .txdata.ConnectionInfo Info = 1;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 1;
  private:
  const ::txdata::ConnectionInfo& _internal_info() const;
  public:
  const ::txdata::ConnectionInfo& info() const;
  ::txdata::ConnectionInfo* release_info();
  ::txdata::ConnectionInfo* mutable_info();
  void set_allocated_info(::txdata::ConnectionInfo* info);

  // @@protoc_insertion_point(class_scope:txdata.DisconnectedData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::txdata::ConnectionInfo* info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_txdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConnectReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txdata.ConnectReq) */ {
 public:
  ConnectReq();
  virtual ~ConnectReq();

  ConnectReq(const ConnectReq& from);

  inline ConnectReq& operator=(const ConnectReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectReq(ConnectReq&& from) noexcept
    : ConnectReq() {
    *this = ::std::move(from);
  }

  inline ConnectReq& operator=(ConnectReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectReq* internal_default_instance() {
    return reinterpret_cast<const ConnectReq*>(
               &_ConnectReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ConnectReq* other);
  friend void swap(ConnectReq& a, ConnectReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectReq* New() const final {
    return CreateMaybeMessage<ConnectReq>(NULL);
  }

  ConnectReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConnectReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConnectReq& from);
  void MergeFrom(const ConnectReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string Pathway = 2;
  int pathway_size() const;
  void clear_pathway();
  static const int kPathwayFieldNumber = 2;
  const ::std::string& pathway(int index) const;
  ::std::string* mutable_pathway(int index);
  void set_pathway(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_pathway(int index, ::std::string&& value);
  #endif
  void set_pathway(int index, const char* value);
  void set_pathway(int index, const char* value, size_t size);
  ::std::string* add_pathway();
  void add_pathway(const ::std::string& value);
  #if LANG_CXX11
  void add_pathway(::std::string&& value);
  #endif
  void add_pathway(const char* value);
  void add_pathway(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& pathway() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pathway();

  // .txdata.ConnectionInfo InfoReq = 1;
  bool has_inforeq() const;
  void clear_inforeq();
  static const int kInfoReqFieldNumber = 1;
  private:
  const ::txdata::ConnectionInfo& _internal_inforeq() const;
  public:
  const ::txdata::ConnectionInfo& inforeq() const;
  ::txdata::ConnectionInfo* release_inforeq();
  ::txdata::ConnectionInfo* mutable_inforeq();
  void set_allocated_inforeq(::txdata::ConnectionInfo* inforeq);

  // @@protoc_insertion_point(class_scope:txdata.ConnectReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pathway_;
  ::txdata::ConnectionInfo* inforeq_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_txdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConnectRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txdata.ConnectRsp) */ {
 public:
  ConnectRsp();
  virtual ~ConnectRsp();

  ConnectRsp(const ConnectRsp& from);

  inline ConnectRsp& operator=(const ConnectRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectRsp(ConnectRsp&& from) noexcept
    : ConnectRsp() {
    *this = ::std::move(from);
  }

  inline ConnectRsp& operator=(ConnectRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectRsp* internal_default_instance() {
    return reinterpret_cast<const ConnectRsp*>(
               &_ConnectRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ConnectRsp* other);
  friend void swap(ConnectRsp& a, ConnectRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectRsp* New() const final {
    return CreateMaybeMessage<ConnectRsp>(NULL);
  }

  ConnectRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConnectRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConnectRsp& from);
  void MergeFrom(const ConnectRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ErrMsg = 4;
  void clear_errmsg();
  static const int kErrMsgFieldNumber = 4;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // .txdata.ConnectionInfo InfoReq = 1;
  bool has_inforeq() const;
  void clear_inforeq();
  static const int kInfoReqFieldNumber = 1;
  private:
  const ::txdata::ConnectionInfo& _internal_inforeq() const;
  public:
  const ::txdata::ConnectionInfo& inforeq() const;
  ::txdata::ConnectionInfo* release_inforeq();
  ::txdata::ConnectionInfo* mutable_inforeq();
  void set_allocated_inforeq(::txdata::ConnectionInfo* inforeq);

  // .txdata.ConnectionInfo InfoRsp = 2;
  bool has_inforsp() const;
  void clear_inforsp();
  static const int kInfoRspFieldNumber = 2;
  private:
  const ::txdata::ConnectionInfo& _internal_inforsp() const;
  public:
  const ::txdata::ConnectionInfo& inforsp() const;
  ::txdata::ConnectionInfo* release_inforsp();
  ::txdata::ConnectionInfo* mutable_inforsp();
  void set_allocated_inforsp(::txdata::ConnectionInfo* inforsp);

  // int32 ErrNo = 3;
  void clear_errno();
  static const int kErrNoFieldNumber = 3;
  ::google::protobuf::int32 errno() const;
  void set_errno(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:txdata.ConnectRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::txdata::ConnectionInfo* inforeq_;
  ::txdata::ConnectionInfo* inforsp_;
  ::google::protobuf::int32 errno_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_txdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OnlineNotice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txdata.OnlineNotice) */ {
 public:
  OnlineNotice();
  virtual ~OnlineNotice();

  OnlineNotice(const OnlineNotice& from);

  inline OnlineNotice& operator=(const OnlineNotice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OnlineNotice(OnlineNotice&& from) noexcept
    : OnlineNotice() {
    *this = ::std::move(from);
  }

  inline OnlineNotice& operator=(OnlineNotice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OnlineNotice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnlineNotice* internal_default_instance() {
    return reinterpret_cast<const OnlineNotice*>(
               &_OnlineNotice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(OnlineNotice* other);
  friend void swap(OnlineNotice& a, OnlineNotice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OnlineNotice* New() const final {
    return CreateMaybeMessage<OnlineNotice>(NULL);
  }

  OnlineNotice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OnlineNotice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OnlineNotice& from);
  void MergeFrom(const OnlineNotice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnlineNotice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool RootIsOnline = 1;
  void clear_rootisonline();
  static const int kRootIsOnlineFieldNumber = 1;
  bool rootisonline() const;
  void set_rootisonline(bool value);

  // @@protoc_insertion_point(class_scope:txdata.OnlineNotice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool rootisonline_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_txdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SystemReport : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txdata.SystemReport) */ {
 public:
  SystemReport();
  virtual ~SystemReport();

  SystemReport(const SystemReport& from);

  inline SystemReport& operator=(const SystemReport& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SystemReport(SystemReport&& from) noexcept
    : SystemReport() {
    *this = ::std::move(from);
  }

  inline SystemReport& operator=(SystemReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemReport* internal_default_instance() {
    return reinterpret_cast<const SystemReport*>(
               &_SystemReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(SystemReport* other);
  friend void swap(SystemReport& a, SystemReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SystemReport* New() const final {
    return CreateMaybeMessage<SystemReport>(NULL);
  }

  SystemReport* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SystemReport>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SystemReport& from);
  void MergeFrom(const SystemReport& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemReport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string Pathway = 2;
  int pathway_size() const;
  void clear_pathway();
  static const int kPathwayFieldNumber = 2;
  const ::std::string& pathway(int index) const;
  ::std::string* mutable_pathway(int index);
  void set_pathway(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_pathway(int index, ::std::string&& value);
  #endif
  void set_pathway(int index, const char* value);
  void set_pathway(int index, const char* value, size_t size);
  ::std::string* add_pathway();
  void add_pathway(const ::std::string& value);
  #if LANG_CXX11
  void add_pathway(::std::string&& value);
  #endif
  void add_pathway(const char* value);
  void add_pathway(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& pathway() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pathway();

  // string UserID = 1;
  void clear_userid();
  static const int kUserIDFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // string Message = 3;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:txdata.SystemReport)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pathway_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_txdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryRecordReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txdata.QueryRecordReq) */ {
 public:
  QueryRecordReq();
  virtual ~QueryRecordReq();

  QueryRecordReq(const QueryRecordReq& from);

  inline QueryRecordReq& operator=(const QueryRecordReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryRecordReq(QueryRecordReq&& from) noexcept
    : QueryRecordReq() {
    *this = ::std::move(from);
  }

  inline QueryRecordReq& operator=(QueryRecordReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryRecordReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryRecordReq* internal_default_instance() {
    return reinterpret_cast<const QueryRecordReq*>(
               &_QueryRecordReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(QueryRecordReq* other);
  friend void swap(QueryRecordReq& a, QueryRecordReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryRecordReq* New() const final {
    return CreateMaybeMessage<QueryRecordReq>(NULL);
  }

  QueryRecordReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryRecordReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryRecordReq& from);
  void MergeFrom(const QueryRecordReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRecordReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string UserID = 1;
  void clear_userid();
  static const int kUserIDFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // int64 SeqNo = 2;
  void clear_seqno();
  static const int kSeqNoFieldNumber = 2;
  ::google::protobuf::int64 seqno() const;
  void set_seqno(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:txdata.QueryRecordReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int64 seqno_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_txdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryRecordRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txdata.QueryRecordRsp) */ {
 public:
  QueryRecordRsp();
  virtual ~QueryRecordRsp();

  QueryRecordRsp(const QueryRecordRsp& from);

  inline QueryRecordRsp& operator=(const QueryRecordRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryRecordRsp(QueryRecordRsp&& from) noexcept
    : QueryRecordRsp() {
    *this = ::std::move(from);
  }

  inline QueryRecordRsp& operator=(QueryRecordRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryRecordRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryRecordRsp* internal_default_instance() {
    return reinterpret_cast<const QueryRecordRsp*>(
               &_QueryRecordRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(QueryRecordRsp* other);
  friend void swap(QueryRecordRsp& a, QueryRecordRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryRecordRsp* New() const final {
    return CreateMaybeMessage<QueryRecordRsp>(NULL);
  }

  QueryRecordRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryRecordRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryRecordRsp& from);
  void MergeFrom(const QueryRecordRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRecordRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes Data = 3;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data(int index) const;
  ::std::string* mutable_data(int index);
  void set_data(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_data(int index, ::std::string&& value);
  #endif
  void set_data(int index, const char* value);
  void set_data(int index, const void* value, size_t size);
  ::std::string* add_data();
  void add_data(const ::std::string& value);
  #if LANG_CXX11
  void add_data(::std::string&& value);
  #endif
  void add_data(const char* value);
  void add_data(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& data() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_data();

  // string UserID = 1;
  void clear_userid();
  static const int kUserIDFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // int64 SeqNo = 2;
  void clear_seqno();
  static const int kSeqNoFieldNumber = 2;
  ::google::protobuf::int64 seqno() const;
  void set_seqno(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:txdata.QueryRecordRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> data_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int64 seqno_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_txdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExecCmdReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txdata.ExecCmdReq) */ {
 public:
  ExecCmdReq();
  virtual ~ExecCmdReq();

  ExecCmdReq(const ExecCmdReq& from);

  inline ExecCmdReq& operator=(const ExecCmdReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecCmdReq(ExecCmdReq&& from) noexcept
    : ExecCmdReq() {
    *this = ::std::move(from);
  }

  inline ExecCmdReq& operator=(ExecCmdReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecCmdReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecCmdReq* internal_default_instance() {
    return reinterpret_cast<const ExecCmdReq*>(
               &_ExecCmdReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(ExecCmdReq* other);
  friend void swap(ExecCmdReq& a, ExecCmdReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecCmdReq* New() const final {
    return CreateMaybeMessage<ExecCmdReq>(NULL);
  }

  ExecCmdReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecCmdReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecCmdReq& from);
  void MergeFrom(const ExecCmdReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecCmdReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Cmd = 1;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  const ::std::string& cmd() const;
  void set_cmd(const ::std::string& value);
  #if LANG_CXX11
  void set_cmd(::std::string&& value);
  #endif
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  ::std::string* mutable_cmd();
  ::std::string* release_cmd();
  void set_allocated_cmd(::std::string* cmd);

  // @@protoc_insertion_point(class_scope:txdata.ExecCmdReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cmd_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_txdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExecCmdRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txdata.ExecCmdRsp) */ {
 public:
  ExecCmdRsp();
  virtual ~ExecCmdRsp();

  ExecCmdRsp(const ExecCmdRsp& from);

  inline ExecCmdRsp& operator=(const ExecCmdRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecCmdRsp(ExecCmdRsp&& from) noexcept
    : ExecCmdRsp() {
    *this = ::std::move(from);
  }

  inline ExecCmdRsp& operator=(ExecCmdRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecCmdRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecCmdRsp* internal_default_instance() {
    return reinterpret_cast<const ExecCmdRsp*>(
               &_ExecCmdRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(ExecCmdRsp* other);
  friend void swap(ExecCmdRsp& a, ExecCmdRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecCmdRsp* New() const final {
    return CreateMaybeMessage<ExecCmdRsp>(NULL);
  }

  ExecCmdRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecCmdRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecCmdRsp& from);
  void MergeFrom(const ExecCmdRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecCmdRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Reply = 1;
  void clear_reply();
  static const int kReplyFieldNumber = 1;
  const ::std::string& reply() const;
  void set_reply(const ::std::string& value);
  #if LANG_CXX11
  void set_reply(::std::string&& value);
  #endif
  void set_reply(const char* value);
  void set_reply(const char* value, size_t size);
  ::std::string* mutable_reply();
  ::std::string* release_reply();
  void set_allocated_reply(::std::string* reply);

  // @@protoc_insertion_point(class_scope:txdata.ExecCmdRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reply_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_txdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EchoItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txdata.EchoItem) */ {
 public:
  EchoItem();
  virtual ~EchoItem();

  EchoItem(const EchoItem& from);

  inline EchoItem& operator=(const EchoItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EchoItem(EchoItem&& from) noexcept
    : EchoItem() {
    *this = ::std::move(from);
  }

  inline EchoItem& operator=(EchoItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoItem* internal_default_instance() {
    return reinterpret_cast<const EchoItem*>(
               &_EchoItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(EchoItem* other);
  friend void swap(EchoItem& a, EchoItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EchoItem* New() const final {
    return CreateMaybeMessage<EchoItem>(NULL);
  }

  EchoItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EchoItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EchoItem& from);
  void MergeFrom(const EchoItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string LocalID = 1;
  void clear_localid();
  static const int kLocalIDFieldNumber = 1;
  const ::std::string& localid() const;
  void set_localid(const ::std::string& value);
  #if LANG_CXX11
  void set_localid(::std::string&& value);
  #endif
  void set_localid(const char* value);
  void set_localid(const char* value, size_t size);
  ::std::string* mutable_localid();
  ::std::string* release_localid();
  void set_allocated_localid(::std::string* localid);

  // string RemoteID = 2;
  void clear_remoteid();
  static const int kRemoteIDFieldNumber = 2;
  const ::std::string& remoteid() const;
  void set_remoteid(const ::std::string& value);
  #if LANG_CXX11
  void set_remoteid(::std::string&& value);
  #endif
  void set_remoteid(const char* value);
  void set_remoteid(const char* value, size_t size);
  ::std::string* mutable_remoteid();
  ::std::string* release_remoteid();
  void set_allocated_remoteid(::std::string* remoteid);

  // string Data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:txdata.EchoItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr localid_;
  ::google::protobuf::internal::ArenaStringPtr remoteid_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_txdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReportDataItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txdata.ReportDataItem) */ {
 public:
  ReportDataItem();
  virtual ~ReportDataItem();

  ReportDataItem(const ReportDataItem& from);

  inline ReportDataItem& operator=(const ReportDataItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReportDataItem(ReportDataItem&& from) noexcept
    : ReportDataItem() {
    *this = ::std::move(from);
  }

  inline ReportDataItem& operator=(ReportDataItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportDataItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportDataItem* internal_default_instance() {
    return reinterpret_cast<const ReportDataItem*>(
               &_ReportDataItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(ReportDataItem* other);
  friend void swap(ReportDataItem& a, ReportDataItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReportDataItem* New() const final {
    return CreateMaybeMessage<ReportDataItem>(NULL);
  }

  ReportDataItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReportDataItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReportDataItem& from);
  void MergeFrom(const ReportDataItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportDataItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // string Data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:txdata.ReportDataItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_txdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendMailItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txdata.SendMailItem) */ {
 public:
  SendMailItem();
  virtual ~SendMailItem();

  SendMailItem(const SendMailItem& from);

  inline SendMailItem& operator=(const SendMailItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendMailItem(SendMailItem&& from) noexcept
    : SendMailItem() {
    *this = ::std::move(from);
  }

  inline SendMailItem& operator=(SendMailItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendMailItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendMailItem* internal_default_instance() {
    return reinterpret_cast<const SendMailItem*>(
               &_SendMailItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(SendMailItem* other);
  friend void swap(SendMailItem& a, SendMailItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendMailItem* New() const final {
    return CreateMaybeMessage<SendMailItem>(NULL);
  }

  SendMailItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendMailItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendMailItem& from);
  void MergeFrom(const SendMailItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMailItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string Password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string SmtpAddr = 3;
  void clear_smtpaddr();
  static const int kSmtpAddrFieldNumber = 3;
  const ::std::string& smtpaddr() const;
  void set_smtpaddr(const ::std::string& value);
  #if LANG_CXX11
  void set_smtpaddr(::std::string&& value);
  #endif
  void set_smtpaddr(const char* value);
  void set_smtpaddr(const char* value, size_t size);
  ::std::string* mutable_smtpaddr();
  ::std::string* release_smtpaddr();
  void set_allocated_smtpaddr(::std::string* smtpaddr);

  // string To = 4;
  void clear_to();
  static const int kToFieldNumber = 4;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // string Subject = 5;
  void clear_subject();
  static const int kSubjectFieldNumber = 5;
  const ::std::string& subject() const;
  void set_subject(const ::std::string& value);
  #if LANG_CXX11
  void set_subject(::std::string&& value);
  #endif
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  ::std::string* mutable_subject();
  ::std::string* release_subject();
  void set_allocated_subject(::std::string* subject);

  // string ContentType = 6;
  void clear_contenttype();
  static const int kContentTypeFieldNumber = 6;
  const ::std::string& contenttype() const;
  void set_contenttype(const ::std::string& value);
  #if LANG_CXX11
  void set_contenttype(::std::string&& value);
  #endif
  void set_contenttype(const char* value);
  void set_contenttype(const char* value, size_t size);
  ::std::string* mutable_contenttype();
  ::std::string* release_contenttype();
  void set_allocated_contenttype(::std::string* contenttype);

  // string Content = 7;
  void clear_content();
  static const int kContentFieldNumber = 7;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:txdata.SendMailItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr smtpaddr_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr subject_;
  ::google::protobuf::internal::ArenaStringPtr contenttype_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_txdata_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UniKey

// string UserID = 1;
inline void UniKey::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UniKey::userid() const {
  // @@protoc_insertion_point(field_get:txdata.UniKey.UserID)
  return userid_.GetNoArena();
}
inline void UniKey::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.UniKey.UserID)
}
#if LANG_CXX11
inline void UniKey::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.UniKey.UserID)
}
#endif
inline void UniKey::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.UniKey.UserID)
}
inline void UniKey::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.UniKey.UserID)
}
inline ::std::string* UniKey::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:txdata.UniKey.UserID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UniKey::release_userid() {
  // @@protoc_insertion_point(field_release:txdata.UniKey.UserID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UniKey::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:txdata.UniKey.UserID)
}

// int64 MsgNo = 2;
inline void UniKey::clear_msgno() {
  msgno_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 UniKey::msgno() const {
  // @@protoc_insertion_point(field_get:txdata.UniKey.MsgNo)
  return msgno_;
}
inline void UniKey::set_msgno(::google::protobuf::int64 value) {
  
  msgno_ = value;
  // @@protoc_insertion_point(field_set:txdata.UniKey.MsgNo)
}

// int32 SeqNo = 3;
inline void UniKey::clear_seqno() {
  seqno_ = 0;
}
inline ::google::protobuf::int32 UniKey::seqno() const {
  // @@protoc_insertion_point(field_get:txdata.UniKey.SeqNo)
  return seqno_;
}
inline void UniKey::set_seqno(::google::protobuf::int32 value) {
  
  seqno_ = value;
  // @@protoc_insertion_point(field_set:txdata.UniKey.SeqNo)
}

// -------------------------------------------------------------------

// MessageAck

// .txdata.UniKey Key = 1;
inline bool MessageAck::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
inline void MessageAck::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
}
inline const ::txdata::UniKey& MessageAck::_internal_key() const {
  return *key_;
}
inline const ::txdata::UniKey& MessageAck::key() const {
  const ::txdata::UniKey* p = key_;
  // @@protoc_insertion_point(field_get:txdata.MessageAck.Key)
  return p != NULL ? *p : *reinterpret_cast<const ::txdata::UniKey*>(
      &::txdata::_UniKey_default_instance_);
}
inline ::txdata::UniKey* MessageAck::release_key() {
  // @@protoc_insertion_point(field_release:txdata.MessageAck.Key)
  
  ::txdata::UniKey* temp = key_;
  key_ = NULL;
  return temp;
}
inline ::txdata::UniKey* MessageAck::mutable_key() {
  
  if (key_ == NULL) {
    auto* p = CreateMaybeMessage<::txdata::UniKey>(GetArenaNoVirtual());
    key_ = p;
  }
  // @@protoc_insertion_point(field_mutable:txdata.MessageAck.Key)
  return key_;
}
inline void MessageAck::set_allocated_key(::txdata::UniKey* key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete key_;
  }
  if (key) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:txdata.MessageAck.Key)
}

// string SenderID = 2;
inline void MessageAck::clear_senderid() {
  senderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageAck::senderid() const {
  // @@protoc_insertion_point(field_get:txdata.MessageAck.SenderID)
  return senderid_.GetNoArena();
}
inline void MessageAck::set_senderid(const ::std::string& value) {
  
  senderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.MessageAck.SenderID)
}
#if LANG_CXX11
inline void MessageAck::set_senderid(::std::string&& value) {
  
  senderid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.MessageAck.SenderID)
}
#endif
inline void MessageAck::set_senderid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  senderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.MessageAck.SenderID)
}
inline void MessageAck::set_senderid(const char* value, size_t size) {
  
  senderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.MessageAck.SenderID)
}
inline ::std::string* MessageAck::mutable_senderid() {
  
  // @@protoc_insertion_point(field_mutable:txdata.MessageAck.SenderID)
  return senderid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageAck::release_senderid() {
  // @@protoc_insertion_point(field_release:txdata.MessageAck.SenderID)
  
  return senderid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageAck::set_allocated_senderid(::std::string* senderid) {
  if (senderid != NULL) {
    
  } else {
    
  }
  senderid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), senderid);
  // @@protoc_insertion_point(field_set_allocated:txdata.MessageAck.SenderID)
}

// string RecverID = 3;
inline void MessageAck::clear_recverid() {
  recverid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageAck::recverid() const {
  // @@protoc_insertion_point(field_get:txdata.MessageAck.RecverID)
  return recverid_.GetNoArena();
}
inline void MessageAck::set_recverid(const ::std::string& value) {
  
  recverid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.MessageAck.RecverID)
}
#if LANG_CXX11
inline void MessageAck::set_recverid(::std::string&& value) {
  
  recverid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.MessageAck.RecverID)
}
#endif
inline void MessageAck::set_recverid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  recverid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.MessageAck.RecverID)
}
inline void MessageAck::set_recverid(const char* value, size_t size) {
  
  recverid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.MessageAck.RecverID)
}
inline ::std::string* MessageAck::mutable_recverid() {
  
  // @@protoc_insertion_point(field_mutable:txdata.MessageAck.RecverID)
  return recverid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageAck::release_recverid() {
  // @@protoc_insertion_point(field_release:txdata.MessageAck.RecverID)
  
  return recverid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageAck::set_allocated_recverid(::std::string* recverid) {
  if (recverid != NULL) {
    
  } else {
    
  }
  recverid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recverid);
  // @@protoc_insertion_point(field_set_allocated:txdata.MessageAck.RecverID)
}

// bool TxToRoot = 4;
inline void MessageAck::clear_txtoroot() {
  txtoroot_ = false;
}
inline bool MessageAck::txtoroot() const {
  // @@protoc_insertion_point(field_get:txdata.MessageAck.TxToRoot)
  return txtoroot_;
}
inline void MessageAck::set_txtoroot(bool value) {
  
  txtoroot_ = value;
  // @@protoc_insertion_point(field_set:txdata.MessageAck.TxToRoot)
}

// bool IsLog = 5;
inline void MessageAck::clear_islog() {
  islog_ = false;
}
inline bool MessageAck::islog() const {
  // @@protoc_insertion_point(field_get:txdata.MessageAck.IsLog)
  return islog_;
}
inline void MessageAck::set_islog(bool value) {
  
  islog_ = value;
  // @@protoc_insertion_point(field_set:txdata.MessageAck.IsLog)
}

// -------------------------------------------------------------------

// CommonErr

// int32 ErrNo = 1;
inline void CommonErr::clear_errno() {
  errno_ = 0;
}
inline ::google::protobuf::int32 CommonErr::errno() const {
  // @@protoc_insertion_point(field_get:txdata.CommonErr.ErrNo)
  return errno_;
}
inline void CommonErr::set_errno(::google::protobuf::int32 value) {
  
  errno_ = value;
  // @@protoc_insertion_point(field_set:txdata.CommonErr.ErrNo)
}

// string ErrMsg = 2;
inline void CommonErr::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommonErr::errmsg() const {
  // @@protoc_insertion_point(field_get:txdata.CommonErr.ErrMsg)
  return errmsg_.GetNoArena();
}
inline void CommonErr::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.CommonErr.ErrMsg)
}
#if LANG_CXX11
inline void CommonErr::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.CommonErr.ErrMsg)
}
#endif
inline void CommonErr::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.CommonErr.ErrMsg)
}
inline void CommonErr::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.CommonErr.ErrMsg)
}
inline ::std::string* CommonErr::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:txdata.CommonErr.ErrMsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonErr::release_errmsg() {
  // @@protoc_insertion_point(field_release:txdata.CommonErr.ErrMsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonErr::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:txdata.CommonErr.ErrMsg)
}

// -------------------------------------------------------------------

// CommonReq

// .txdata.UniKey Key = 1;
inline bool CommonReq::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
inline void CommonReq::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
}
inline const ::txdata::UniKey& CommonReq::_internal_key() const {
  return *key_;
}
inline const ::txdata::UniKey& CommonReq::key() const {
  const ::txdata::UniKey* p = key_;
  // @@protoc_insertion_point(field_get:txdata.CommonReq.Key)
  return p != NULL ? *p : *reinterpret_cast<const ::txdata::UniKey*>(
      &::txdata::_UniKey_default_instance_);
}
inline ::txdata::UniKey* CommonReq::release_key() {
  // @@protoc_insertion_point(field_release:txdata.CommonReq.Key)
  
  ::txdata::UniKey* temp = key_;
  key_ = NULL;
  return temp;
}
inline ::txdata::UniKey* CommonReq::mutable_key() {
  
  if (key_ == NULL) {
    auto* p = CreateMaybeMessage<::txdata::UniKey>(GetArenaNoVirtual());
    key_ = p;
  }
  // @@protoc_insertion_point(field_mutable:txdata.CommonReq.Key)
  return key_;
}
inline void CommonReq::set_allocated_key(::txdata::UniKey* key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete key_;
  }
  if (key) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:txdata.CommonReq.Key)
}

// string SenderID = 2;
inline void CommonReq::clear_senderid() {
  senderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommonReq::senderid() const {
  // @@protoc_insertion_point(field_get:txdata.CommonReq.SenderID)
  return senderid_.GetNoArena();
}
inline void CommonReq::set_senderid(const ::std::string& value) {
  
  senderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.CommonReq.SenderID)
}
#if LANG_CXX11
inline void CommonReq::set_senderid(::std::string&& value) {
  
  senderid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.CommonReq.SenderID)
}
#endif
inline void CommonReq::set_senderid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  senderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.CommonReq.SenderID)
}
inline void CommonReq::set_senderid(const char* value, size_t size) {
  
  senderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.CommonReq.SenderID)
}
inline ::std::string* CommonReq::mutable_senderid() {
  
  // @@protoc_insertion_point(field_mutable:txdata.CommonReq.SenderID)
  return senderid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonReq::release_senderid() {
  // @@protoc_insertion_point(field_release:txdata.CommonReq.SenderID)
  
  return senderid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonReq::set_allocated_senderid(::std::string* senderid) {
  if (senderid != NULL) {
    
  } else {
    
  }
  senderid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), senderid);
  // @@protoc_insertion_point(field_set_allocated:txdata.CommonReq.SenderID)
}

// string RecverID = 3;
inline void CommonReq::clear_recverid() {
  recverid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommonReq::recverid() const {
  // @@protoc_insertion_point(field_get:txdata.CommonReq.RecverID)
  return recverid_.GetNoArena();
}
inline void CommonReq::set_recverid(const ::std::string& value) {
  
  recverid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.CommonReq.RecverID)
}
#if LANG_CXX11
inline void CommonReq::set_recverid(::std::string&& value) {
  
  recverid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.CommonReq.RecverID)
}
#endif
inline void CommonReq::set_recverid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  recverid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.CommonReq.RecverID)
}
inline void CommonReq::set_recverid(const char* value, size_t size) {
  
  recverid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.CommonReq.RecverID)
}
inline ::std::string* CommonReq::mutable_recverid() {
  
  // @@protoc_insertion_point(field_mutable:txdata.CommonReq.RecverID)
  return recverid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonReq::release_recverid() {
  // @@protoc_insertion_point(field_release:txdata.CommonReq.RecverID)
  
  return recverid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonReq::set_allocated_recverid(::std::string* recverid) {
  if (recverid != NULL) {
    
  } else {
    
  }
  recverid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recverid);
  // @@protoc_insertion_point(field_set_allocated:txdata.CommonReq.RecverID)
}

// bool TxToRoot = 4;
inline void CommonReq::clear_txtoroot() {
  txtoroot_ = false;
}
inline bool CommonReq::txtoroot() const {
  // @@protoc_insertion_point(field_get:txdata.CommonReq.TxToRoot)
  return txtoroot_;
}
inline void CommonReq::set_txtoroot(bool value) {
  
  txtoroot_ = value;
  // @@protoc_insertion_point(field_set:txdata.CommonReq.TxToRoot)
}

// bool IsLog = 5;
inline void CommonReq::clear_islog() {
  islog_ = false;
}
inline bool CommonReq::islog() const {
  // @@protoc_insertion_point(field_get:txdata.CommonReq.IsLog)
  return islog_;
}
inline void CommonReq::set_islog(bool value) {
  
  islog_ = value;
  // @@protoc_insertion_point(field_set:txdata.CommonReq.IsLog)
}

// bool IsSafe = 6;
inline void CommonReq::clear_issafe() {
  issafe_ = false;
}
inline bool CommonReq::issafe() const {
  // @@protoc_insertion_point(field_get:txdata.CommonReq.IsSafe)
  return issafe_;
}
inline void CommonReq::set_issafe(bool value) {
  
  issafe_ = value;
  // @@protoc_insertion_point(field_set:txdata.CommonReq.IsSafe)
}

// bool IsPush = 7;
inline void CommonReq::clear_ispush() {
  ispush_ = false;
}
inline bool CommonReq::ispush() const {
  // @@protoc_insertion_point(field_get:txdata.CommonReq.IsPush)
  return ispush_;
}
inline void CommonReq::set_ispush(bool value) {
  
  ispush_ = value;
  // @@protoc_insertion_point(field_set:txdata.CommonReq.IsPush)
}

// bool UpCache = 8;
inline void CommonReq::clear_upcache() {
  upcache_ = false;
}
inline bool CommonReq::upcache() const {
  // @@protoc_insertion_point(field_get:txdata.CommonReq.UpCache)
  return upcache_;
}
inline void CommonReq::set_upcache(bool value) {
  
  upcache_ = value;
  // @@protoc_insertion_point(field_set:txdata.CommonReq.UpCache)
}

// .txdata.MsgType ReqType = 9;
inline void CommonReq::clear_reqtype() {
  reqtype_ = 0;
}
inline ::txdata::MsgType CommonReq::reqtype() const {
  // @@protoc_insertion_point(field_get:txdata.CommonReq.ReqType)
  return static_cast< ::txdata::MsgType >(reqtype_);
}
inline void CommonReq::set_reqtype(::txdata::MsgType value) {
  
  reqtype_ = value;
  // @@protoc_insertion_point(field_set:txdata.CommonReq.ReqType)
}

// bytes ReqData = 10;
inline void CommonReq::clear_reqdata() {
  reqdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommonReq::reqdata() const {
  // @@protoc_insertion_point(field_get:txdata.CommonReq.ReqData)
  return reqdata_.GetNoArena();
}
inline void CommonReq::set_reqdata(const ::std::string& value) {
  
  reqdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.CommonReq.ReqData)
}
#if LANG_CXX11
inline void CommonReq::set_reqdata(::std::string&& value) {
  
  reqdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.CommonReq.ReqData)
}
#endif
inline void CommonReq::set_reqdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reqdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.CommonReq.ReqData)
}
inline void CommonReq::set_reqdata(const void* value, size_t size) {
  
  reqdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.CommonReq.ReqData)
}
inline ::std::string* CommonReq::mutable_reqdata() {
  
  // @@protoc_insertion_point(field_mutable:txdata.CommonReq.ReqData)
  return reqdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonReq::release_reqdata() {
  // @@protoc_insertion_point(field_release:txdata.CommonReq.ReqData)
  
  return reqdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonReq::set_allocated_reqdata(::std::string* reqdata) {
  if (reqdata != NULL) {
    
  } else {
    
  }
  reqdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reqdata);
  // @@protoc_insertion_point(field_set_allocated:txdata.CommonReq.ReqData)
}

// .google.protobuf.Timestamp ReqTime = 11;
inline bool CommonReq::has_reqtime() const {
  return this != internal_default_instance() && reqtime_ != NULL;
}
inline const ::google::protobuf::Timestamp& CommonReq::_internal_reqtime() const {
  return *reqtime_;
}
inline const ::google::protobuf::Timestamp& CommonReq::reqtime() const {
  const ::google::protobuf::Timestamp* p = reqtime_;
  // @@protoc_insertion_point(field_get:txdata.CommonReq.ReqTime)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* CommonReq::release_reqtime() {
  // @@protoc_insertion_point(field_release:txdata.CommonReq.ReqTime)
  
  ::google::protobuf::Timestamp* temp = reqtime_;
  reqtime_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* CommonReq::mutable_reqtime() {
  
  if (reqtime_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    reqtime_ = p;
  }
  // @@protoc_insertion_point(field_mutable:txdata.CommonReq.ReqTime)
  return reqtime_;
}
inline void CommonReq::set_allocated_reqtime(::google::protobuf::Timestamp* reqtime) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reqtime_);
  }
  if (reqtime) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(reqtime)->GetArena();
    if (message_arena != submessage_arena) {
      reqtime = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reqtime, submessage_arena);
    }
    
  } else {
    
  }
  reqtime_ = reqtime;
  // @@protoc_insertion_point(field_set_allocated:txdata.CommonReq.ReqTime)
}

// -------------------------------------------------------------------

// CommonRsp

// .txdata.UniKey Key = 1;
inline bool CommonRsp::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
inline void CommonRsp::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
}
inline const ::txdata::UniKey& CommonRsp::_internal_key() const {
  return *key_;
}
inline const ::txdata::UniKey& CommonRsp::key() const {
  const ::txdata::UniKey* p = key_;
  // @@protoc_insertion_point(field_get:txdata.CommonRsp.Key)
  return p != NULL ? *p : *reinterpret_cast<const ::txdata::UniKey*>(
      &::txdata::_UniKey_default_instance_);
}
inline ::txdata::UniKey* CommonRsp::release_key() {
  // @@protoc_insertion_point(field_release:txdata.CommonRsp.Key)
  
  ::txdata::UniKey* temp = key_;
  key_ = NULL;
  return temp;
}
inline ::txdata::UniKey* CommonRsp::mutable_key() {
  
  if (key_ == NULL) {
    auto* p = CreateMaybeMessage<::txdata::UniKey>(GetArenaNoVirtual());
    key_ = p;
  }
  // @@protoc_insertion_point(field_mutable:txdata.CommonRsp.Key)
  return key_;
}
inline void CommonRsp::set_allocated_key(::txdata::UniKey* key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete key_;
  }
  if (key) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:txdata.CommonRsp.Key)
}

// string SenderID = 2;
inline void CommonRsp::clear_senderid() {
  senderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommonRsp::senderid() const {
  // @@protoc_insertion_point(field_get:txdata.CommonRsp.SenderID)
  return senderid_.GetNoArena();
}
inline void CommonRsp::set_senderid(const ::std::string& value) {
  
  senderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.CommonRsp.SenderID)
}
#if LANG_CXX11
inline void CommonRsp::set_senderid(::std::string&& value) {
  
  senderid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.CommonRsp.SenderID)
}
#endif
inline void CommonRsp::set_senderid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  senderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.CommonRsp.SenderID)
}
inline void CommonRsp::set_senderid(const char* value, size_t size) {
  
  senderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.CommonRsp.SenderID)
}
inline ::std::string* CommonRsp::mutable_senderid() {
  
  // @@protoc_insertion_point(field_mutable:txdata.CommonRsp.SenderID)
  return senderid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonRsp::release_senderid() {
  // @@protoc_insertion_point(field_release:txdata.CommonRsp.SenderID)
  
  return senderid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonRsp::set_allocated_senderid(::std::string* senderid) {
  if (senderid != NULL) {
    
  } else {
    
  }
  senderid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), senderid);
  // @@protoc_insertion_point(field_set_allocated:txdata.CommonRsp.SenderID)
}

// string RecverID = 3;
inline void CommonRsp::clear_recverid() {
  recverid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommonRsp::recverid() const {
  // @@protoc_insertion_point(field_get:txdata.CommonRsp.RecverID)
  return recverid_.GetNoArena();
}
inline void CommonRsp::set_recverid(const ::std::string& value) {
  
  recverid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.CommonRsp.RecverID)
}
#if LANG_CXX11
inline void CommonRsp::set_recverid(::std::string&& value) {
  
  recverid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.CommonRsp.RecverID)
}
#endif
inline void CommonRsp::set_recverid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  recverid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.CommonRsp.RecverID)
}
inline void CommonRsp::set_recverid(const char* value, size_t size) {
  
  recverid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.CommonRsp.RecverID)
}
inline ::std::string* CommonRsp::mutable_recverid() {
  
  // @@protoc_insertion_point(field_mutable:txdata.CommonRsp.RecverID)
  return recverid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonRsp::release_recverid() {
  // @@protoc_insertion_point(field_release:txdata.CommonRsp.RecverID)
  
  return recverid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonRsp::set_allocated_recverid(::std::string* recverid) {
  if (recverid != NULL) {
    
  } else {
    
  }
  recverid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recverid);
  // @@protoc_insertion_point(field_set_allocated:txdata.CommonRsp.RecverID)
}

// bool TxToRoot = 4;
inline void CommonRsp::clear_txtoroot() {
  txtoroot_ = false;
}
inline bool CommonRsp::txtoroot() const {
  // @@protoc_insertion_point(field_get:txdata.CommonRsp.TxToRoot)
  return txtoroot_;
}
inline void CommonRsp::set_txtoroot(bool value) {
  
  txtoroot_ = value;
  // @@protoc_insertion_point(field_set:txdata.CommonRsp.TxToRoot)
}

// bool IsLog = 5;
inline void CommonRsp::clear_islog() {
  islog_ = false;
}
inline bool CommonRsp::islog() const {
  // @@protoc_insertion_point(field_get:txdata.CommonRsp.IsLog)
  return islog_;
}
inline void CommonRsp::set_islog(bool value) {
  
  islog_ = value;
  // @@protoc_insertion_point(field_set:txdata.CommonRsp.IsLog)
}

// bool IsSafe = 6;
inline void CommonRsp::clear_issafe() {
  issafe_ = false;
}
inline bool CommonRsp::issafe() const {
  // @@protoc_insertion_point(field_get:txdata.CommonRsp.IsSafe)
  return issafe_;
}
inline void CommonRsp::set_issafe(bool value) {
  
  issafe_ = value;
  // @@protoc_insertion_point(field_set:txdata.CommonRsp.IsSafe)
}

// bool IsPush = 7;
inline void CommonRsp::clear_ispush() {
  ispush_ = false;
}
inline bool CommonRsp::ispush() const {
  // @@protoc_insertion_point(field_get:txdata.CommonRsp.IsPush)
  return ispush_;
}
inline void CommonRsp::set_ispush(bool value) {
  
  ispush_ = value;
  // @@protoc_insertion_point(field_set:txdata.CommonRsp.IsPush)
}

// bool UpCache = 8;
inline void CommonRsp::clear_upcache() {
  upcache_ = false;
}
inline bool CommonRsp::upcache() const {
  // @@protoc_insertion_point(field_get:txdata.CommonRsp.UpCache)
  return upcache_;
}
inline void CommonRsp::set_upcache(bool value) {
  
  upcache_ = value;
  // @@protoc_insertion_point(field_set:txdata.CommonRsp.UpCache)
}

// .txdata.MsgType RspType = 9;
inline void CommonRsp::clear_rsptype() {
  rsptype_ = 0;
}
inline ::txdata::MsgType CommonRsp::rsptype() const {
  // @@protoc_insertion_point(field_get:txdata.CommonRsp.RspType)
  return static_cast< ::txdata::MsgType >(rsptype_);
}
inline void CommonRsp::set_rsptype(::txdata::MsgType value) {
  
  rsptype_ = value;
  // @@protoc_insertion_point(field_set:txdata.CommonRsp.RspType)
}

// bytes RspData = 10;
inline void CommonRsp::clear_rspdata() {
  rspdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommonRsp::rspdata() const {
  // @@protoc_insertion_point(field_get:txdata.CommonRsp.RspData)
  return rspdata_.GetNoArena();
}
inline void CommonRsp::set_rspdata(const ::std::string& value) {
  
  rspdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.CommonRsp.RspData)
}
#if LANG_CXX11
inline void CommonRsp::set_rspdata(::std::string&& value) {
  
  rspdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.CommonRsp.RspData)
}
#endif
inline void CommonRsp::set_rspdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rspdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.CommonRsp.RspData)
}
inline void CommonRsp::set_rspdata(const void* value, size_t size) {
  
  rspdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.CommonRsp.RspData)
}
inline ::std::string* CommonRsp::mutable_rspdata() {
  
  // @@protoc_insertion_point(field_mutable:txdata.CommonRsp.RspData)
  return rspdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonRsp::release_rspdata() {
  // @@protoc_insertion_point(field_release:txdata.CommonRsp.RspData)
  
  return rspdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonRsp::set_allocated_rspdata(::std::string* rspdata) {
  if (rspdata != NULL) {
    
  } else {
    
  }
  rspdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rspdata);
  // @@protoc_insertion_point(field_set_allocated:txdata.CommonRsp.RspData)
}

// .google.protobuf.Timestamp RspTime = 11;
inline bool CommonRsp::has_rsptime() const {
  return this != internal_default_instance() && rsptime_ != NULL;
}
inline const ::google::protobuf::Timestamp& CommonRsp::_internal_rsptime() const {
  return *rsptime_;
}
inline const ::google::protobuf::Timestamp& CommonRsp::rsptime() const {
  const ::google::protobuf::Timestamp* p = rsptime_;
  // @@protoc_insertion_point(field_get:txdata.CommonRsp.RspTime)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* CommonRsp::release_rsptime() {
  // @@protoc_insertion_point(field_release:txdata.CommonRsp.RspTime)
  
  ::google::protobuf::Timestamp* temp = rsptime_;
  rsptime_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* CommonRsp::mutable_rsptime() {
  
  if (rsptime_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    rsptime_ = p;
  }
  // @@protoc_insertion_point(field_mutable:txdata.CommonRsp.RspTime)
  return rsptime_;
}
inline void CommonRsp::set_allocated_rsptime(::google::protobuf::Timestamp* rsptime) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rsptime_);
  }
  if (rsptime) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(rsptime)->GetArena();
    if (message_arena != submessage_arena) {
      rsptime = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rsptime, submessage_arena);
    }
    
  } else {
    
  }
  rsptime_ = rsptime;
  // @@protoc_insertion_point(field_set_allocated:txdata.CommonRsp.RspTime)
}

// bool IsLast = 12;
inline void CommonRsp::clear_islast() {
  islast_ = false;
}
inline bool CommonRsp::islast() const {
  // @@protoc_insertion_point(field_get:txdata.CommonRsp.IsLast)
  return islast_;
}
inline void CommonRsp::set_islast(bool value) {
  
  islast_ = value;
  // @@protoc_insertion_point(field_set:txdata.CommonRsp.IsLast)
}

// -------------------------------------------------------------------

// ConnectionInfo

// string UserID = 1;
inline void ConnectionInfo::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectionInfo::userid() const {
  // @@protoc_insertion_point(field_get:txdata.ConnectionInfo.UserID)
  return userid_.GetNoArena();
}
inline void ConnectionInfo::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.ConnectionInfo.UserID)
}
#if LANG_CXX11
inline void ConnectionInfo::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.ConnectionInfo.UserID)
}
#endif
inline void ConnectionInfo::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.ConnectionInfo.UserID)
}
inline void ConnectionInfo::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.ConnectionInfo.UserID)
}
inline ::std::string* ConnectionInfo::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:txdata.ConnectionInfo.UserID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionInfo::release_userid() {
  // @@protoc_insertion_point(field_release:txdata.ConnectionInfo.UserID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionInfo::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:txdata.ConnectionInfo.UserID)
}

// string BelongID = 2;
inline void ConnectionInfo::clear_belongid() {
  belongid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectionInfo::belongid() const {
  // @@protoc_insertion_point(field_get:txdata.ConnectionInfo.BelongID)
  return belongid_.GetNoArena();
}
inline void ConnectionInfo::set_belongid(const ::std::string& value) {
  
  belongid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.ConnectionInfo.BelongID)
}
#if LANG_CXX11
inline void ConnectionInfo::set_belongid(::std::string&& value) {
  
  belongid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.ConnectionInfo.BelongID)
}
#endif
inline void ConnectionInfo::set_belongid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  belongid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.ConnectionInfo.BelongID)
}
inline void ConnectionInfo::set_belongid(const char* value, size_t size) {
  
  belongid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.ConnectionInfo.BelongID)
}
inline ::std::string* ConnectionInfo::mutable_belongid() {
  
  // @@protoc_insertion_point(field_mutable:txdata.ConnectionInfo.BelongID)
  return belongid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionInfo::release_belongid() {
  // @@protoc_insertion_point(field_release:txdata.ConnectionInfo.BelongID)
  
  return belongid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionInfo::set_allocated_belongid(::std::string* belongid) {
  if (belongid != NULL) {
    
  } else {
    
  }
  belongid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), belongid);
  // @@protoc_insertion_point(field_set_allocated:txdata.ConnectionInfo.BelongID)
}

// string Version = 3;
inline void ConnectionInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectionInfo::version() const {
  // @@protoc_insertion_point(field_get:txdata.ConnectionInfo.Version)
  return version_.GetNoArena();
}
inline void ConnectionInfo::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.ConnectionInfo.Version)
}
#if LANG_CXX11
inline void ConnectionInfo::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.ConnectionInfo.Version)
}
#endif
inline void ConnectionInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.ConnectionInfo.Version)
}
inline void ConnectionInfo::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.ConnectionInfo.Version)
}
inline ::std::string* ConnectionInfo::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:txdata.ConnectionInfo.Version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionInfo::release_version() {
  // @@protoc_insertion_point(field_release:txdata.ConnectionInfo.Version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:txdata.ConnectionInfo.Version)
}

// .txdata.ConnectionInfo.LinkType LinkMode = 4;
inline void ConnectionInfo::clear_linkmode() {
  linkmode_ = 0;
}
inline ::txdata::ConnectionInfo_LinkType ConnectionInfo::linkmode() const {
  // @@protoc_insertion_point(field_get:txdata.ConnectionInfo.LinkMode)
  return static_cast< ::txdata::ConnectionInfo_LinkType >(linkmode_);
}
inline void ConnectionInfo::set_linkmode(::txdata::ConnectionInfo_LinkType value) {
  
  linkmode_ = value;
  // @@protoc_insertion_point(field_set:txdata.ConnectionInfo.LinkMode)
}

// int32 ExePid = 5;
inline void ConnectionInfo::clear_exepid() {
  exepid_ = 0;
}
inline ::google::protobuf::int32 ConnectionInfo::exepid() const {
  // @@protoc_insertion_point(field_get:txdata.ConnectionInfo.ExePid)
  return exepid_;
}
inline void ConnectionInfo::set_exepid(::google::protobuf::int32 value) {
  
  exepid_ = value;
  // @@protoc_insertion_point(field_set:txdata.ConnectionInfo.ExePid)
}

// string ExePath = 6;
inline void ConnectionInfo::clear_exepath() {
  exepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectionInfo::exepath() const {
  // @@protoc_insertion_point(field_get:txdata.ConnectionInfo.ExePath)
  return exepath_.GetNoArena();
}
inline void ConnectionInfo::set_exepath(const ::std::string& value) {
  
  exepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.ConnectionInfo.ExePath)
}
#if LANG_CXX11
inline void ConnectionInfo::set_exepath(::std::string&& value) {
  
  exepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.ConnectionInfo.ExePath)
}
#endif
inline void ConnectionInfo::set_exepath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.ConnectionInfo.ExePath)
}
inline void ConnectionInfo::set_exepath(const char* value, size_t size) {
  
  exepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.ConnectionInfo.ExePath)
}
inline ::std::string* ConnectionInfo::mutable_exepath() {
  
  // @@protoc_insertion_point(field_mutable:txdata.ConnectionInfo.ExePath)
  return exepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionInfo::release_exepath() {
  // @@protoc_insertion_point(field_release:txdata.ConnectionInfo.ExePath)
  
  return exepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionInfo::set_allocated_exepath(::std::string* exepath) {
  if (exepath != NULL) {
    
  } else {
    
  }
  exepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exepath);
  // @@protoc_insertion_point(field_set_allocated:txdata.ConnectionInfo.ExePath)
}

// string Remark = 7;
inline void ConnectionInfo::clear_remark() {
  remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectionInfo::remark() const {
  // @@protoc_insertion_point(field_get:txdata.ConnectionInfo.Remark)
  return remark_.GetNoArena();
}
inline void ConnectionInfo::set_remark(const ::std::string& value) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.ConnectionInfo.Remark)
}
#if LANG_CXX11
inline void ConnectionInfo::set_remark(::std::string&& value) {
  
  remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.ConnectionInfo.Remark)
}
#endif
inline void ConnectionInfo::set_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.ConnectionInfo.Remark)
}
inline void ConnectionInfo::set_remark(const char* value, size_t size) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.ConnectionInfo.Remark)
}
inline ::std::string* ConnectionInfo::mutable_remark() {
  
  // @@protoc_insertion_point(field_mutable:txdata.ConnectionInfo.Remark)
  return remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionInfo::release_remark() {
  // @@protoc_insertion_point(field_release:txdata.ConnectionInfo.Remark)
  
  return remark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionInfo::set_allocated_remark(::std::string* remark) {
  if (remark != NULL) {
    
  } else {
    
  }
  remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remark);
  // @@protoc_insertion_point(field_set_allocated:txdata.ConnectionInfo.Remark)
}

// -------------------------------------------------------------------

// DisconnectedData

// .txdata.ConnectionInfo Info = 1;
inline bool DisconnectedData::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void DisconnectedData::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
}
inline const ::txdata::ConnectionInfo& DisconnectedData::_internal_info() const {
  return *info_;
}
inline const ::txdata::ConnectionInfo& DisconnectedData::info() const {
  const ::txdata::ConnectionInfo* p = info_;
  // @@protoc_insertion_point(field_get:txdata.DisconnectedData.Info)
  return p != NULL ? *p : *reinterpret_cast<const ::txdata::ConnectionInfo*>(
      &::txdata::_ConnectionInfo_default_instance_);
}
inline ::txdata::ConnectionInfo* DisconnectedData::release_info() {
  // @@protoc_insertion_point(field_release:txdata.DisconnectedData.Info)
  
  ::txdata::ConnectionInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline ::txdata::ConnectionInfo* DisconnectedData::mutable_info() {
  
  if (info_ == NULL) {
    auto* p = CreateMaybeMessage<::txdata::ConnectionInfo>(GetArenaNoVirtual());
    info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:txdata.DisconnectedData.Info)
  return info_;
}
inline void DisconnectedData::set_allocated_info(::txdata::ConnectionInfo* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete info_;
  }
  if (info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:txdata.DisconnectedData.Info)
}

// -------------------------------------------------------------------

// ConnectReq

// .txdata.ConnectionInfo InfoReq = 1;
inline bool ConnectReq::has_inforeq() const {
  return this != internal_default_instance() && inforeq_ != NULL;
}
inline void ConnectReq::clear_inforeq() {
  if (GetArenaNoVirtual() == NULL && inforeq_ != NULL) {
    delete inforeq_;
  }
  inforeq_ = NULL;
}
inline const ::txdata::ConnectionInfo& ConnectReq::_internal_inforeq() const {
  return *inforeq_;
}
inline const ::txdata::ConnectionInfo& ConnectReq::inforeq() const {
  const ::txdata::ConnectionInfo* p = inforeq_;
  // @@protoc_insertion_point(field_get:txdata.ConnectReq.InfoReq)
  return p != NULL ? *p : *reinterpret_cast<const ::txdata::ConnectionInfo*>(
      &::txdata::_ConnectionInfo_default_instance_);
}
inline ::txdata::ConnectionInfo* ConnectReq::release_inforeq() {
  // @@protoc_insertion_point(field_release:txdata.ConnectReq.InfoReq)
  
  ::txdata::ConnectionInfo* temp = inforeq_;
  inforeq_ = NULL;
  return temp;
}
inline ::txdata::ConnectionInfo* ConnectReq::mutable_inforeq() {
  
  if (inforeq_ == NULL) {
    auto* p = CreateMaybeMessage<::txdata::ConnectionInfo>(GetArenaNoVirtual());
    inforeq_ = p;
  }
  // @@protoc_insertion_point(field_mutable:txdata.ConnectReq.InfoReq)
  return inforeq_;
}
inline void ConnectReq::set_allocated_inforeq(::txdata::ConnectionInfo* inforeq) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inforeq_;
  }
  if (inforeq) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inforeq = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inforeq, submessage_arena);
    }
    
  } else {
    
  }
  inforeq_ = inforeq;
  // @@protoc_insertion_point(field_set_allocated:txdata.ConnectReq.InfoReq)
}

// repeated string Pathway = 2;
inline int ConnectReq::pathway_size() const {
  return pathway_.size();
}
inline void ConnectReq::clear_pathway() {
  pathway_.Clear();
}
inline const ::std::string& ConnectReq::pathway(int index) const {
  // @@protoc_insertion_point(field_get:txdata.ConnectReq.Pathway)
  return pathway_.Get(index);
}
inline ::std::string* ConnectReq::mutable_pathway(int index) {
  // @@protoc_insertion_point(field_mutable:txdata.ConnectReq.Pathway)
  return pathway_.Mutable(index);
}
inline void ConnectReq::set_pathway(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:txdata.ConnectReq.Pathway)
  pathway_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ConnectReq::set_pathway(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:txdata.ConnectReq.Pathway)
  pathway_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ConnectReq::set_pathway(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  pathway_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txdata.ConnectReq.Pathway)
}
inline void ConnectReq::set_pathway(int index, const char* value, size_t size) {
  pathway_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txdata.ConnectReq.Pathway)
}
inline ::std::string* ConnectReq::add_pathway() {
  // @@protoc_insertion_point(field_add_mutable:txdata.ConnectReq.Pathway)
  return pathway_.Add();
}
inline void ConnectReq::add_pathway(const ::std::string& value) {
  pathway_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:txdata.ConnectReq.Pathway)
}
#if LANG_CXX11
inline void ConnectReq::add_pathway(::std::string&& value) {
  pathway_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:txdata.ConnectReq.Pathway)
}
#endif
inline void ConnectReq::add_pathway(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  pathway_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txdata.ConnectReq.Pathway)
}
inline void ConnectReq::add_pathway(const char* value, size_t size) {
  pathway_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txdata.ConnectReq.Pathway)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ConnectReq::pathway() const {
  // @@protoc_insertion_point(field_list:txdata.ConnectReq.Pathway)
  return pathway_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ConnectReq::mutable_pathway() {
  // @@protoc_insertion_point(field_mutable_list:txdata.ConnectReq.Pathway)
  return &pathway_;
}

// -------------------------------------------------------------------

// ConnectRsp

// .txdata.ConnectionInfo InfoReq = 1;
inline bool ConnectRsp::has_inforeq() const {
  return this != internal_default_instance() && inforeq_ != NULL;
}
inline void ConnectRsp::clear_inforeq() {
  if (GetArenaNoVirtual() == NULL && inforeq_ != NULL) {
    delete inforeq_;
  }
  inforeq_ = NULL;
}
inline const ::txdata::ConnectionInfo& ConnectRsp::_internal_inforeq() const {
  return *inforeq_;
}
inline const ::txdata::ConnectionInfo& ConnectRsp::inforeq() const {
  const ::txdata::ConnectionInfo* p = inforeq_;
  // @@protoc_insertion_point(field_get:txdata.ConnectRsp.InfoReq)
  return p != NULL ? *p : *reinterpret_cast<const ::txdata::ConnectionInfo*>(
      &::txdata::_ConnectionInfo_default_instance_);
}
inline ::txdata::ConnectionInfo* ConnectRsp::release_inforeq() {
  // @@protoc_insertion_point(field_release:txdata.ConnectRsp.InfoReq)
  
  ::txdata::ConnectionInfo* temp = inforeq_;
  inforeq_ = NULL;
  return temp;
}
inline ::txdata::ConnectionInfo* ConnectRsp::mutable_inforeq() {
  
  if (inforeq_ == NULL) {
    auto* p = CreateMaybeMessage<::txdata::ConnectionInfo>(GetArenaNoVirtual());
    inforeq_ = p;
  }
  // @@protoc_insertion_point(field_mutable:txdata.ConnectRsp.InfoReq)
  return inforeq_;
}
inline void ConnectRsp::set_allocated_inforeq(::txdata::ConnectionInfo* inforeq) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inforeq_;
  }
  if (inforeq) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inforeq = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inforeq, submessage_arena);
    }
    
  } else {
    
  }
  inforeq_ = inforeq;
  // @@protoc_insertion_point(field_set_allocated:txdata.ConnectRsp.InfoReq)
}

// .txdata.ConnectionInfo InfoRsp = 2;
inline bool ConnectRsp::has_inforsp() const {
  return this != internal_default_instance() && inforsp_ != NULL;
}
inline void ConnectRsp::clear_inforsp() {
  if (GetArenaNoVirtual() == NULL && inforsp_ != NULL) {
    delete inforsp_;
  }
  inforsp_ = NULL;
}
inline const ::txdata::ConnectionInfo& ConnectRsp::_internal_inforsp() const {
  return *inforsp_;
}
inline const ::txdata::ConnectionInfo& ConnectRsp::inforsp() const {
  const ::txdata::ConnectionInfo* p = inforsp_;
  // @@protoc_insertion_point(field_get:txdata.ConnectRsp.InfoRsp)
  return p != NULL ? *p : *reinterpret_cast<const ::txdata::ConnectionInfo*>(
      &::txdata::_ConnectionInfo_default_instance_);
}
inline ::txdata::ConnectionInfo* ConnectRsp::release_inforsp() {
  // @@protoc_insertion_point(field_release:txdata.ConnectRsp.InfoRsp)
  
  ::txdata::ConnectionInfo* temp = inforsp_;
  inforsp_ = NULL;
  return temp;
}
inline ::txdata::ConnectionInfo* ConnectRsp::mutable_inforsp() {
  
  if (inforsp_ == NULL) {
    auto* p = CreateMaybeMessage<::txdata::ConnectionInfo>(GetArenaNoVirtual());
    inforsp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:txdata.ConnectRsp.InfoRsp)
  return inforsp_;
}
inline void ConnectRsp::set_allocated_inforsp(::txdata::ConnectionInfo* inforsp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inforsp_;
  }
  if (inforsp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inforsp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inforsp, submessage_arena);
    }
    
  } else {
    
  }
  inforsp_ = inforsp;
  // @@protoc_insertion_point(field_set_allocated:txdata.ConnectRsp.InfoRsp)
}

// int32 ErrNo = 3;
inline void ConnectRsp::clear_errno() {
  errno_ = 0;
}
inline ::google::protobuf::int32 ConnectRsp::errno() const {
  // @@protoc_insertion_point(field_get:txdata.ConnectRsp.ErrNo)
  return errno_;
}
inline void ConnectRsp::set_errno(::google::protobuf::int32 value) {
  
  errno_ = value;
  // @@protoc_insertion_point(field_set:txdata.ConnectRsp.ErrNo)
}

// string ErrMsg = 4;
inline void ConnectRsp::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:txdata.ConnectRsp.ErrMsg)
  return errmsg_.GetNoArena();
}
inline void ConnectRsp::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.ConnectRsp.ErrMsg)
}
#if LANG_CXX11
inline void ConnectRsp::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.ConnectRsp.ErrMsg)
}
#endif
inline void ConnectRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.ConnectRsp.ErrMsg)
}
inline void ConnectRsp::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.ConnectRsp.ErrMsg)
}
inline ::std::string* ConnectRsp::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:txdata.ConnectRsp.ErrMsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:txdata.ConnectRsp.ErrMsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectRsp::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:txdata.ConnectRsp.ErrMsg)
}

// -------------------------------------------------------------------

// OnlineNotice

// bool RootIsOnline = 1;
inline void OnlineNotice::clear_rootisonline() {
  rootisonline_ = false;
}
inline bool OnlineNotice::rootisonline() const {
  // @@protoc_insertion_point(field_get:txdata.OnlineNotice.RootIsOnline)
  return rootisonline_;
}
inline void OnlineNotice::set_rootisonline(bool value) {
  
  rootisonline_ = value;
  // @@protoc_insertion_point(field_set:txdata.OnlineNotice.RootIsOnline)
}

// -------------------------------------------------------------------

// SystemReport

// string UserID = 1;
inline void SystemReport::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemReport::userid() const {
  // @@protoc_insertion_point(field_get:txdata.SystemReport.UserID)
  return userid_.GetNoArena();
}
inline void SystemReport::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.SystemReport.UserID)
}
#if LANG_CXX11
inline void SystemReport::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.SystemReport.UserID)
}
#endif
inline void SystemReport::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.SystemReport.UserID)
}
inline void SystemReport::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.SystemReport.UserID)
}
inline ::std::string* SystemReport::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:txdata.SystemReport.UserID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemReport::release_userid() {
  // @@protoc_insertion_point(field_release:txdata.SystemReport.UserID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemReport::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:txdata.SystemReport.UserID)
}

// repeated string Pathway = 2;
inline int SystemReport::pathway_size() const {
  return pathway_.size();
}
inline void SystemReport::clear_pathway() {
  pathway_.Clear();
}
inline const ::std::string& SystemReport::pathway(int index) const {
  // @@protoc_insertion_point(field_get:txdata.SystemReport.Pathway)
  return pathway_.Get(index);
}
inline ::std::string* SystemReport::mutable_pathway(int index) {
  // @@protoc_insertion_point(field_mutable:txdata.SystemReport.Pathway)
  return pathway_.Mutable(index);
}
inline void SystemReport::set_pathway(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:txdata.SystemReport.Pathway)
  pathway_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SystemReport::set_pathway(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:txdata.SystemReport.Pathway)
  pathway_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SystemReport::set_pathway(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  pathway_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txdata.SystemReport.Pathway)
}
inline void SystemReport::set_pathway(int index, const char* value, size_t size) {
  pathway_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txdata.SystemReport.Pathway)
}
inline ::std::string* SystemReport::add_pathway() {
  // @@protoc_insertion_point(field_add_mutable:txdata.SystemReport.Pathway)
  return pathway_.Add();
}
inline void SystemReport::add_pathway(const ::std::string& value) {
  pathway_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:txdata.SystemReport.Pathway)
}
#if LANG_CXX11
inline void SystemReport::add_pathway(::std::string&& value) {
  pathway_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:txdata.SystemReport.Pathway)
}
#endif
inline void SystemReport::add_pathway(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  pathway_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txdata.SystemReport.Pathway)
}
inline void SystemReport::add_pathway(const char* value, size_t size) {
  pathway_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txdata.SystemReport.Pathway)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SystemReport::pathway() const {
  // @@protoc_insertion_point(field_list:txdata.SystemReport.Pathway)
  return pathway_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SystemReport::mutable_pathway() {
  // @@protoc_insertion_point(field_mutable_list:txdata.SystemReport.Pathway)
  return &pathway_;
}

// string Message = 3;
inline void SystemReport::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemReport::message() const {
  // @@protoc_insertion_point(field_get:txdata.SystemReport.Message)
  return message_.GetNoArena();
}
inline void SystemReport::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.SystemReport.Message)
}
#if LANG_CXX11
inline void SystemReport::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.SystemReport.Message)
}
#endif
inline void SystemReport::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.SystemReport.Message)
}
inline void SystemReport::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.SystemReport.Message)
}
inline ::std::string* SystemReport::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:txdata.SystemReport.Message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemReport::release_message() {
  // @@protoc_insertion_point(field_release:txdata.SystemReport.Message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemReport::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:txdata.SystemReport.Message)
}

// -------------------------------------------------------------------

// QueryRecordReq

// string UserID = 1;
inline void QueryRecordReq::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryRecordReq::userid() const {
  // @@protoc_insertion_point(field_get:txdata.QueryRecordReq.UserID)
  return userid_.GetNoArena();
}
inline void QueryRecordReq::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.QueryRecordReq.UserID)
}
#if LANG_CXX11
inline void QueryRecordReq::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.QueryRecordReq.UserID)
}
#endif
inline void QueryRecordReq::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.QueryRecordReq.UserID)
}
inline void QueryRecordReq::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.QueryRecordReq.UserID)
}
inline ::std::string* QueryRecordReq::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:txdata.QueryRecordReq.UserID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryRecordReq::release_userid() {
  // @@protoc_insertion_point(field_release:txdata.QueryRecordReq.UserID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryRecordReq::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:txdata.QueryRecordReq.UserID)
}

// int64 SeqNo = 2;
inline void QueryRecordReq::clear_seqno() {
  seqno_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QueryRecordReq::seqno() const {
  // @@protoc_insertion_point(field_get:txdata.QueryRecordReq.SeqNo)
  return seqno_;
}
inline void QueryRecordReq::set_seqno(::google::protobuf::int64 value) {
  
  seqno_ = value;
  // @@protoc_insertion_point(field_set:txdata.QueryRecordReq.SeqNo)
}

// -------------------------------------------------------------------

// QueryRecordRsp

// string UserID = 1;
inline void QueryRecordRsp::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryRecordRsp::userid() const {
  // @@protoc_insertion_point(field_get:txdata.QueryRecordRsp.UserID)
  return userid_.GetNoArena();
}
inline void QueryRecordRsp::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.QueryRecordRsp.UserID)
}
#if LANG_CXX11
inline void QueryRecordRsp::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.QueryRecordRsp.UserID)
}
#endif
inline void QueryRecordRsp::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.QueryRecordRsp.UserID)
}
inline void QueryRecordRsp::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.QueryRecordRsp.UserID)
}
inline ::std::string* QueryRecordRsp::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:txdata.QueryRecordRsp.UserID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryRecordRsp::release_userid() {
  // @@protoc_insertion_point(field_release:txdata.QueryRecordRsp.UserID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryRecordRsp::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:txdata.QueryRecordRsp.UserID)
}

// int64 SeqNo = 2;
inline void QueryRecordRsp::clear_seqno() {
  seqno_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QueryRecordRsp::seqno() const {
  // @@protoc_insertion_point(field_get:txdata.QueryRecordRsp.SeqNo)
  return seqno_;
}
inline void QueryRecordRsp::set_seqno(::google::protobuf::int64 value) {
  
  seqno_ = value;
  // @@protoc_insertion_point(field_set:txdata.QueryRecordRsp.SeqNo)
}

// repeated bytes Data = 3;
inline int QueryRecordRsp::data_size() const {
  return data_.size();
}
inline void QueryRecordRsp::clear_data() {
  data_.Clear();
}
inline const ::std::string& QueryRecordRsp::data(int index) const {
  // @@protoc_insertion_point(field_get:txdata.QueryRecordRsp.Data)
  return data_.Get(index);
}
inline ::std::string* QueryRecordRsp::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:txdata.QueryRecordRsp.Data)
  return data_.Mutable(index);
}
inline void QueryRecordRsp::set_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:txdata.QueryRecordRsp.Data)
  data_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void QueryRecordRsp::set_data(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:txdata.QueryRecordRsp.Data)
  data_.Mutable(index)->assign(std::move(value));
}
#endif
inline void QueryRecordRsp::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txdata.QueryRecordRsp.Data)
}
inline void QueryRecordRsp::set_data(int index, const void* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txdata.QueryRecordRsp.Data)
}
inline ::std::string* QueryRecordRsp::add_data() {
  // @@protoc_insertion_point(field_add_mutable:txdata.QueryRecordRsp.Data)
  return data_.Add();
}
inline void QueryRecordRsp::add_data(const ::std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:txdata.QueryRecordRsp.Data)
}
#if LANG_CXX11
inline void QueryRecordRsp::add_data(::std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:txdata.QueryRecordRsp.Data)
}
#endif
inline void QueryRecordRsp::add_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txdata.QueryRecordRsp.Data)
}
inline void QueryRecordRsp::add_data(const void* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txdata.QueryRecordRsp.Data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryRecordRsp::data() const {
  // @@protoc_insertion_point(field_list:txdata.QueryRecordRsp.Data)
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
QueryRecordRsp::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:txdata.QueryRecordRsp.Data)
  return &data_;
}

// -------------------------------------------------------------------

// ExecCmdReq

// string Cmd = 1;
inline void ExecCmdReq::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecCmdReq::cmd() const {
  // @@protoc_insertion_point(field_get:txdata.ExecCmdReq.Cmd)
  return cmd_.GetNoArena();
}
inline void ExecCmdReq::set_cmd(const ::std::string& value) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.ExecCmdReq.Cmd)
}
#if LANG_CXX11
inline void ExecCmdReq::set_cmd(::std::string&& value) {
  
  cmd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.ExecCmdReq.Cmd)
}
#endif
inline void ExecCmdReq::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.ExecCmdReq.Cmd)
}
inline void ExecCmdReq::set_cmd(const char* value, size_t size) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.ExecCmdReq.Cmd)
}
inline ::std::string* ExecCmdReq::mutable_cmd() {
  
  // @@protoc_insertion_point(field_mutable:txdata.ExecCmdReq.Cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecCmdReq::release_cmd() {
  // @@protoc_insertion_point(field_release:txdata.ExecCmdReq.Cmd)
  
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecCmdReq::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    
  } else {
    
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:txdata.ExecCmdReq.Cmd)
}

// -------------------------------------------------------------------

// ExecCmdRsp

// string Reply = 1;
inline void ExecCmdRsp::clear_reply() {
  reply_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecCmdRsp::reply() const {
  // @@protoc_insertion_point(field_get:txdata.ExecCmdRsp.Reply)
  return reply_.GetNoArena();
}
inline void ExecCmdRsp::set_reply(const ::std::string& value) {
  
  reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.ExecCmdRsp.Reply)
}
#if LANG_CXX11
inline void ExecCmdRsp::set_reply(::std::string&& value) {
  
  reply_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.ExecCmdRsp.Reply)
}
#endif
inline void ExecCmdRsp::set_reply(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.ExecCmdRsp.Reply)
}
inline void ExecCmdRsp::set_reply(const char* value, size_t size) {
  
  reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.ExecCmdRsp.Reply)
}
inline ::std::string* ExecCmdRsp::mutable_reply() {
  
  // @@protoc_insertion_point(field_mutable:txdata.ExecCmdRsp.Reply)
  return reply_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecCmdRsp::release_reply() {
  // @@protoc_insertion_point(field_release:txdata.ExecCmdRsp.Reply)
  
  return reply_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecCmdRsp::set_allocated_reply(::std::string* reply) {
  if (reply != NULL) {
    
  } else {
    
  }
  reply_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reply);
  // @@protoc_insertion_point(field_set_allocated:txdata.ExecCmdRsp.Reply)
}

// -------------------------------------------------------------------

// EchoItem

// string LocalID = 1;
inline void EchoItem::clear_localid() {
  localid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EchoItem::localid() const {
  // @@protoc_insertion_point(field_get:txdata.EchoItem.LocalID)
  return localid_.GetNoArena();
}
inline void EchoItem::set_localid(const ::std::string& value) {
  
  localid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.EchoItem.LocalID)
}
#if LANG_CXX11
inline void EchoItem::set_localid(::std::string&& value) {
  
  localid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.EchoItem.LocalID)
}
#endif
inline void EchoItem::set_localid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  localid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.EchoItem.LocalID)
}
inline void EchoItem::set_localid(const char* value, size_t size) {
  
  localid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.EchoItem.LocalID)
}
inline ::std::string* EchoItem::mutable_localid() {
  
  // @@protoc_insertion_point(field_mutable:txdata.EchoItem.LocalID)
  return localid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EchoItem::release_localid() {
  // @@protoc_insertion_point(field_release:txdata.EchoItem.LocalID)
  
  return localid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EchoItem::set_allocated_localid(::std::string* localid) {
  if (localid != NULL) {
    
  } else {
    
  }
  localid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), localid);
  // @@protoc_insertion_point(field_set_allocated:txdata.EchoItem.LocalID)
}

// string RemoteID = 2;
inline void EchoItem::clear_remoteid() {
  remoteid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EchoItem::remoteid() const {
  // @@protoc_insertion_point(field_get:txdata.EchoItem.RemoteID)
  return remoteid_.GetNoArena();
}
inline void EchoItem::set_remoteid(const ::std::string& value) {
  
  remoteid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.EchoItem.RemoteID)
}
#if LANG_CXX11
inline void EchoItem::set_remoteid(::std::string&& value) {
  
  remoteid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.EchoItem.RemoteID)
}
#endif
inline void EchoItem::set_remoteid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remoteid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.EchoItem.RemoteID)
}
inline void EchoItem::set_remoteid(const char* value, size_t size) {
  
  remoteid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.EchoItem.RemoteID)
}
inline ::std::string* EchoItem::mutable_remoteid() {
  
  // @@protoc_insertion_point(field_mutable:txdata.EchoItem.RemoteID)
  return remoteid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EchoItem::release_remoteid() {
  // @@protoc_insertion_point(field_release:txdata.EchoItem.RemoteID)
  
  return remoteid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EchoItem::set_allocated_remoteid(::std::string* remoteid) {
  if (remoteid != NULL) {
    
  } else {
    
  }
  remoteid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remoteid);
  // @@protoc_insertion_point(field_set_allocated:txdata.EchoItem.RemoteID)
}

// string Data = 3;
inline void EchoItem::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EchoItem::data() const {
  // @@protoc_insertion_point(field_get:txdata.EchoItem.Data)
  return data_.GetNoArena();
}
inline void EchoItem::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.EchoItem.Data)
}
#if LANG_CXX11
inline void EchoItem::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.EchoItem.Data)
}
#endif
inline void EchoItem::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.EchoItem.Data)
}
inline void EchoItem::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.EchoItem.Data)
}
inline ::std::string* EchoItem::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:txdata.EchoItem.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EchoItem::release_data() {
  // @@protoc_insertion_point(field_release:txdata.EchoItem.Data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EchoItem::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:txdata.EchoItem.Data)
}

// -------------------------------------------------------------------

// ReportDataItem

// string Topic = 1;
inline void ReportDataItem::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReportDataItem::topic() const {
  // @@protoc_insertion_point(field_get:txdata.ReportDataItem.Topic)
  return topic_.GetNoArena();
}
inline void ReportDataItem::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.ReportDataItem.Topic)
}
#if LANG_CXX11
inline void ReportDataItem::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.ReportDataItem.Topic)
}
#endif
inline void ReportDataItem::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.ReportDataItem.Topic)
}
inline void ReportDataItem::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.ReportDataItem.Topic)
}
inline ::std::string* ReportDataItem::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:txdata.ReportDataItem.Topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportDataItem::release_topic() {
  // @@protoc_insertion_point(field_release:txdata.ReportDataItem.Topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportDataItem::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:txdata.ReportDataItem.Topic)
}

// string Data = 2;
inline void ReportDataItem::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReportDataItem::data() const {
  // @@protoc_insertion_point(field_get:txdata.ReportDataItem.Data)
  return data_.GetNoArena();
}
inline void ReportDataItem::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.ReportDataItem.Data)
}
#if LANG_CXX11
inline void ReportDataItem::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.ReportDataItem.Data)
}
#endif
inline void ReportDataItem::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.ReportDataItem.Data)
}
inline void ReportDataItem::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.ReportDataItem.Data)
}
inline ::std::string* ReportDataItem::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:txdata.ReportDataItem.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportDataItem::release_data() {
  // @@protoc_insertion_point(field_release:txdata.ReportDataItem.Data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportDataItem::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:txdata.ReportDataItem.Data)
}

// -------------------------------------------------------------------

// SendMailItem

// string Username = 1;
inline void SendMailItem::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendMailItem::username() const {
  // @@protoc_insertion_point(field_get:txdata.SendMailItem.Username)
  return username_.GetNoArena();
}
inline void SendMailItem::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.SendMailItem.Username)
}
#if LANG_CXX11
inline void SendMailItem::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.SendMailItem.Username)
}
#endif
inline void SendMailItem::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.SendMailItem.Username)
}
inline void SendMailItem::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.SendMailItem.Username)
}
inline ::std::string* SendMailItem::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:txdata.SendMailItem.Username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMailItem::release_username() {
  // @@protoc_insertion_point(field_release:txdata.SendMailItem.Username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMailItem::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:txdata.SendMailItem.Username)
}

// string Password = 2;
inline void SendMailItem::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendMailItem::password() const {
  // @@protoc_insertion_point(field_get:txdata.SendMailItem.Password)
  return password_.GetNoArena();
}
inline void SendMailItem::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.SendMailItem.Password)
}
#if LANG_CXX11
inline void SendMailItem::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.SendMailItem.Password)
}
#endif
inline void SendMailItem::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.SendMailItem.Password)
}
inline void SendMailItem::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.SendMailItem.Password)
}
inline ::std::string* SendMailItem::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:txdata.SendMailItem.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMailItem::release_password() {
  // @@protoc_insertion_point(field_release:txdata.SendMailItem.Password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMailItem::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:txdata.SendMailItem.Password)
}

// string SmtpAddr = 3;
inline void SendMailItem::clear_smtpaddr() {
  smtpaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendMailItem::smtpaddr() const {
  // @@protoc_insertion_point(field_get:txdata.SendMailItem.SmtpAddr)
  return smtpaddr_.GetNoArena();
}
inline void SendMailItem::set_smtpaddr(const ::std::string& value) {
  
  smtpaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.SendMailItem.SmtpAddr)
}
#if LANG_CXX11
inline void SendMailItem::set_smtpaddr(::std::string&& value) {
  
  smtpaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.SendMailItem.SmtpAddr)
}
#endif
inline void SendMailItem::set_smtpaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smtpaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.SendMailItem.SmtpAddr)
}
inline void SendMailItem::set_smtpaddr(const char* value, size_t size) {
  
  smtpaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.SendMailItem.SmtpAddr)
}
inline ::std::string* SendMailItem::mutable_smtpaddr() {
  
  // @@protoc_insertion_point(field_mutable:txdata.SendMailItem.SmtpAddr)
  return smtpaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMailItem::release_smtpaddr() {
  // @@protoc_insertion_point(field_release:txdata.SendMailItem.SmtpAddr)
  
  return smtpaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMailItem::set_allocated_smtpaddr(::std::string* smtpaddr) {
  if (smtpaddr != NULL) {
    
  } else {
    
  }
  smtpaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smtpaddr);
  // @@protoc_insertion_point(field_set_allocated:txdata.SendMailItem.SmtpAddr)
}

// string To = 4;
inline void SendMailItem::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendMailItem::to() const {
  // @@protoc_insertion_point(field_get:txdata.SendMailItem.To)
  return to_.GetNoArena();
}
inline void SendMailItem::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.SendMailItem.To)
}
#if LANG_CXX11
inline void SendMailItem::set_to(::std::string&& value) {
  
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.SendMailItem.To)
}
#endif
inline void SendMailItem::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.SendMailItem.To)
}
inline void SendMailItem::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.SendMailItem.To)
}
inline ::std::string* SendMailItem::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:txdata.SendMailItem.To)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMailItem::release_to() {
  // @@protoc_insertion_point(field_release:txdata.SendMailItem.To)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMailItem::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:txdata.SendMailItem.To)
}

// string Subject = 5;
inline void SendMailItem::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendMailItem::subject() const {
  // @@protoc_insertion_point(field_get:txdata.SendMailItem.Subject)
  return subject_.GetNoArena();
}
inline void SendMailItem::set_subject(const ::std::string& value) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.SendMailItem.Subject)
}
#if LANG_CXX11
inline void SendMailItem::set_subject(::std::string&& value) {
  
  subject_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.SendMailItem.Subject)
}
#endif
inline void SendMailItem::set_subject(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.SendMailItem.Subject)
}
inline void SendMailItem::set_subject(const char* value, size_t size) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.SendMailItem.Subject)
}
inline ::std::string* SendMailItem::mutable_subject() {
  
  // @@protoc_insertion_point(field_mutable:txdata.SendMailItem.Subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMailItem::release_subject() {
  // @@protoc_insertion_point(field_release:txdata.SendMailItem.Subject)
  
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMailItem::set_allocated_subject(::std::string* subject) {
  if (subject != NULL) {
    
  } else {
    
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:txdata.SendMailItem.Subject)
}

// string ContentType = 6;
inline void SendMailItem::clear_contenttype() {
  contenttype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendMailItem::contenttype() const {
  // @@protoc_insertion_point(field_get:txdata.SendMailItem.ContentType)
  return contenttype_.GetNoArena();
}
inline void SendMailItem::set_contenttype(const ::std::string& value) {
  
  contenttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.SendMailItem.ContentType)
}
#if LANG_CXX11
inline void SendMailItem::set_contenttype(::std::string&& value) {
  
  contenttype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.SendMailItem.ContentType)
}
#endif
inline void SendMailItem::set_contenttype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  contenttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.SendMailItem.ContentType)
}
inline void SendMailItem::set_contenttype(const char* value, size_t size) {
  
  contenttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.SendMailItem.ContentType)
}
inline ::std::string* SendMailItem::mutable_contenttype() {
  
  // @@protoc_insertion_point(field_mutable:txdata.SendMailItem.ContentType)
  return contenttype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMailItem::release_contenttype() {
  // @@protoc_insertion_point(field_release:txdata.SendMailItem.ContentType)
  
  return contenttype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMailItem::set_allocated_contenttype(::std::string* contenttype) {
  if (contenttype != NULL) {
    
  } else {
    
  }
  contenttype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contenttype);
  // @@protoc_insertion_point(field_set_allocated:txdata.SendMailItem.ContentType)
}

// string Content = 7;
inline void SendMailItem::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendMailItem::content() const {
  // @@protoc_insertion_point(field_get:txdata.SendMailItem.Content)
  return content_.GetNoArena();
}
inline void SendMailItem::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.SendMailItem.Content)
}
#if LANG_CXX11
inline void SendMailItem::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.SendMailItem.Content)
}
#endif
inline void SendMailItem::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.SendMailItem.Content)
}
inline void SendMailItem::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.SendMailItem.Content)
}
inline ::std::string* SendMailItem::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:txdata.SendMailItem.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMailItem::release_content() {
  // @@protoc_insertion_point(field_release:txdata.SendMailItem.Content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMailItem::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:txdata.SendMailItem.Content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace txdata

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::txdata::ConnectionInfo_LinkType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::txdata::ConnectionInfo_LinkType>() {
  return ::txdata::ConnectionInfo_LinkType_descriptor();
}
template <> struct is_proto_enum< ::txdata::MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::txdata::MsgType>() {
  return ::txdata::MsgType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_txdata_2eproto
