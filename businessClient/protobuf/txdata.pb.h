// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: txdata.proto

#ifndef PROTOBUF_INCLUDED_txdata_2eproto
#define PROTOBUF_INCLUDED_txdata_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_txdata_2eproto 

namespace protobuf_txdata_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_txdata_2eproto
namespace txdata {
class CommonNtosReq;
class CommonNtosReqDefaultTypeInternal;
extern CommonNtosReqDefaultTypeInternal _CommonNtosReq_default_instance_;
class CommonNtosRsp;
class CommonNtosRspDefaultTypeInternal;
extern CommonNtosRspDefaultTypeInternal _CommonNtosRsp_default_instance_;
class ConnectedData;
class ConnectedDataDefaultTypeInternal;
extern ConnectedDataDefaultTypeInternal _ConnectedData_default_instance_;
class ConnectionInfo;
class ConnectionInfoDefaultTypeInternal;
extern ConnectionInfoDefaultTypeInternal _ConnectionInfo_default_instance_;
class DisconnectedData;
class DisconnectedDataDefaultTypeInternal;
extern DisconnectedDataDefaultTypeInternal _DisconnectedData_default_instance_;
class ExecuteCommandReq;
class ExecuteCommandReqDefaultTypeInternal;
extern ExecuteCommandReqDefaultTypeInternal _ExecuteCommandReq_default_instance_;
class ExecuteCommandRsp;
class ExecuteCommandRspDefaultTypeInternal;
extern ExecuteCommandRspDefaultTypeInternal _ExecuteCommandRsp_default_instance_;
class ReportDataItem;
class ReportDataItemDefaultTypeInternal;
extern ReportDataItemDefaultTypeInternal _ReportDataItem_default_instance_;
class SendMailItem;
class SendMailItemDefaultTypeInternal;
extern SendMailItemDefaultTypeInternal _SendMailItem_default_instance_;
}  // namespace txdata
namespace google {
namespace protobuf {
template<> ::txdata::CommonNtosReq* Arena::CreateMaybeMessage<::txdata::CommonNtosReq>(Arena*);
template<> ::txdata::CommonNtosRsp* Arena::CreateMaybeMessage<::txdata::CommonNtosRsp>(Arena*);
template<> ::txdata::ConnectedData* Arena::CreateMaybeMessage<::txdata::ConnectedData>(Arena*);
template<> ::txdata::ConnectionInfo* Arena::CreateMaybeMessage<::txdata::ConnectionInfo>(Arena*);
template<> ::txdata::DisconnectedData* Arena::CreateMaybeMessage<::txdata::DisconnectedData>(Arena*);
template<> ::txdata::ExecuteCommandReq* Arena::CreateMaybeMessage<::txdata::ExecuteCommandReq>(Arena*);
template<> ::txdata::ExecuteCommandRsp* Arena::CreateMaybeMessage<::txdata::ExecuteCommandRsp>(Arena*);
template<> ::txdata::ReportDataItem* Arena::CreateMaybeMessage<::txdata::ReportDataItem>(Arena*);
template<> ::txdata::SendMailItem* Arena::CreateMaybeMessage<::txdata::SendMailItem>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace txdata {

enum ConnectionInfo_LinkType {
  ConnectionInfo_LinkType_Zero3 = 0,
  ConnectionInfo_LinkType_CONNECT = 1,
  ConnectionInfo_LinkType_ACCEPT = 2,
  ConnectionInfo_LinkType_ConnectionInfo_LinkType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ConnectionInfo_LinkType_ConnectionInfo_LinkType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ConnectionInfo_LinkType_IsValid(int value);
const ConnectionInfo_LinkType ConnectionInfo_LinkType_LinkType_MIN = ConnectionInfo_LinkType_Zero3;
const ConnectionInfo_LinkType ConnectionInfo_LinkType_LinkType_MAX = ConnectionInfo_LinkType_ACCEPT;
const int ConnectionInfo_LinkType_LinkType_ARRAYSIZE = ConnectionInfo_LinkType_LinkType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConnectionInfo_LinkType_descriptor();
inline const ::std::string& ConnectionInfo_LinkType_Name(ConnectionInfo_LinkType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConnectionInfo_LinkType_descriptor(), value);
}
inline bool ConnectionInfo_LinkType_Parse(
    const ::std::string& name, ConnectionInfo_LinkType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConnectionInfo_LinkType>(
    ConnectionInfo_LinkType_descriptor(), name, value);
}
enum MsgType {
  Zero1 = 0,
  ID_ConnectedData = 1,
  ID_DisconnectedData = 2,
  ID_CommonNtosReq = 31,
  ID_CommonNtosRsp = 32,
  ID_CommonStonReq = 33,
  ID_CommonStoaRsp = 34,
  ID_ExecuteCommandReq = 35,
  ID_ExecuteCommandRsp = 36,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MsgType_IsValid(int value);
const MsgType MsgType_MIN = Zero1;
const MsgType MsgType_MAX = ID_ExecuteCommandRsp;
const int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgType_descriptor();
inline const ::std::string& MsgType_Name(MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgType_descriptor(), value);
}
inline bool MsgType_Parse(
    const ::std::string& name, MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
enum ProgramType {
  Zero2 = 0,
  CLIENT = 1,
  SERVER = 2,
  NODE = 3,
  POINT = 4,
  ProgramType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ProgramType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ProgramType_IsValid(int value);
const ProgramType ProgramType_MIN = Zero2;
const ProgramType ProgramType_MAX = POINT;
const int ProgramType_ARRAYSIZE = ProgramType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProgramType_descriptor();
inline const ::std::string& ProgramType_Name(ProgramType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProgramType_descriptor(), value);
}
inline bool ProgramType_Parse(
    const ::std::string& name, ProgramType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProgramType>(
    ProgramType_descriptor(), name, value);
}
// ===================================================================

class ConnectionInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txdata.ConnectionInfo) */ {
 public:
  ConnectionInfo();
  virtual ~ConnectionInfo();

  ConnectionInfo(const ConnectionInfo& from);

  inline ConnectionInfo& operator=(const ConnectionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectionInfo(ConnectionInfo&& from) noexcept
    : ConnectionInfo() {
    *this = ::std::move(from);
  }

  inline ConnectionInfo& operator=(ConnectionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectionInfo* internal_default_instance() {
    return reinterpret_cast<const ConnectionInfo*>(
               &_ConnectionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ConnectionInfo* other);
  friend void swap(ConnectionInfo& a, ConnectionInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectionInfo* New() const final {
    return CreateMaybeMessage<ConnectionInfo>(NULL);
  }

  ConnectionInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConnectionInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConnectionInfo& from);
  void MergeFrom(const ConnectionInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConnectionInfo_LinkType LinkType;
  static const LinkType Zero3 =
    ConnectionInfo_LinkType_Zero3;
  static const LinkType CONNECT =
    ConnectionInfo_LinkType_CONNECT;
  static const LinkType ACCEPT =
    ConnectionInfo_LinkType_ACCEPT;
  static inline bool LinkType_IsValid(int value) {
    return ConnectionInfo_LinkType_IsValid(value);
  }
  static const LinkType LinkType_MIN =
    ConnectionInfo_LinkType_LinkType_MIN;
  static const LinkType LinkType_MAX =
    ConnectionInfo_LinkType_LinkType_MAX;
  static const int LinkType_ARRAYSIZE =
    ConnectionInfo_LinkType_LinkType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LinkType_descriptor() {
    return ConnectionInfo_LinkType_descriptor();
  }
  static inline const ::std::string& LinkType_Name(LinkType value) {
    return ConnectionInfo_LinkType_Name(value);
  }
  static inline bool LinkType_Parse(const ::std::string& name,
      LinkType* value) {
    return ConnectionInfo_LinkType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string UserID = 1;
  void clear_userid();
  static const int kUserIDFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // string BelongID = 2;
  void clear_belongid();
  static const int kBelongIDFieldNumber = 2;
  const ::std::string& belongid() const;
  void set_belongid(const ::std::string& value);
  #if LANG_CXX11
  void set_belongid(::std::string&& value);
  #endif
  void set_belongid(const char* value);
  void set_belongid(const char* value, size_t size);
  ::std::string* mutable_belongid();
  ::std::string* release_belongid();
  void set_allocated_belongid(::std::string* belongid);

  // string Version = 3;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string ExePath = 8;
  void clear_exepath();
  static const int kExePathFieldNumber = 8;
  const ::std::string& exepath() const;
  void set_exepath(const ::std::string& value);
  #if LANG_CXX11
  void set_exepath(::std::string&& value);
  #endif
  void set_exepath(const char* value);
  void set_exepath(const char* value, size_t size);
  ::std::string* mutable_exepath();
  ::std::string* release_exepath();
  void set_allocated_exepath(::std::string* exepath);

  // .txdata.ProgramType ExeType = 4;
  void clear_exetype();
  static const int kExeTypeFieldNumber = 4;
  ::txdata::ProgramType exetype() const;
  void set_exetype(::txdata::ProgramType value);

  // bool IsLeaf = 5;
  void clear_isleaf();
  static const int kIsLeafFieldNumber = 5;
  bool isleaf() const;
  void set_isleaf(bool value);

  // .txdata.ConnectionInfo.LinkType LinkMode = 6;
  void clear_linkmode();
  static const int kLinkModeFieldNumber = 6;
  ::txdata::ConnectionInfo_LinkType linkmode() const;
  void set_linkmode(::txdata::ConnectionInfo_LinkType value);

  // int32 ExePid = 7;
  void clear_exepid();
  static const int kExePidFieldNumber = 7;
  ::google::protobuf::int32 exepid() const;
  void set_exepid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:txdata.ConnectionInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr belongid_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr exepath_;
  int exetype_;
  bool isleaf_;
  int linkmode_;
  ::google::protobuf::int32 exepid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_txdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConnectedData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txdata.ConnectedData) */ {
 public:
  ConnectedData();
  virtual ~ConnectedData();

  ConnectedData(const ConnectedData& from);

  inline ConnectedData& operator=(const ConnectedData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectedData(ConnectedData&& from) noexcept
    : ConnectedData() {
    *this = ::std::move(from);
  }

  inline ConnectedData& operator=(ConnectedData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectedData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectedData* internal_default_instance() {
    return reinterpret_cast<const ConnectedData*>(
               &_ConnectedData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ConnectedData* other);
  friend void swap(ConnectedData& a, ConnectedData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectedData* New() const final {
    return CreateMaybeMessage<ConnectedData>(NULL);
  }

  ConnectedData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConnectedData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConnectedData& from);
  void MergeFrom(const ConnectedData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectedData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string Pathway = 2;
  int pathway_size() const;
  void clear_pathway();
  static const int kPathwayFieldNumber = 2;
  const ::std::string& pathway(int index) const;
  ::std::string* mutable_pathway(int index);
  void set_pathway(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_pathway(int index, ::std::string&& value);
  #endif
  void set_pathway(int index, const char* value);
  void set_pathway(int index, const char* value, size_t size);
  ::std::string* add_pathway();
  void add_pathway(const ::std::string& value);
  #if LANG_CXX11
  void add_pathway(::std::string&& value);
  #endif
  void add_pathway(const char* value);
  void add_pathway(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& pathway() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pathway();

  // .txdata.ConnectionInfo Info = 1;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 1;
  private:
  const ::txdata::ConnectionInfo& _internal_info() const;
  public:
  const ::txdata::ConnectionInfo& info() const;
  ::txdata::ConnectionInfo* release_info();
  ::txdata::ConnectionInfo* mutable_info();
  void set_allocated_info(::txdata::ConnectionInfo* info);

  // @@protoc_insertion_point(class_scope:txdata.ConnectedData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pathway_;
  ::txdata::ConnectionInfo* info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_txdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DisconnectedData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txdata.DisconnectedData) */ {
 public:
  DisconnectedData();
  virtual ~DisconnectedData();

  DisconnectedData(const DisconnectedData& from);

  inline DisconnectedData& operator=(const DisconnectedData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DisconnectedData(DisconnectedData&& from) noexcept
    : DisconnectedData() {
    *this = ::std::move(from);
  }

  inline DisconnectedData& operator=(DisconnectedData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DisconnectedData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisconnectedData* internal_default_instance() {
    return reinterpret_cast<const DisconnectedData*>(
               &_DisconnectedData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(DisconnectedData* other);
  friend void swap(DisconnectedData& a, DisconnectedData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DisconnectedData* New() const final {
    return CreateMaybeMessage<DisconnectedData>(NULL);
  }

  DisconnectedData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DisconnectedData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DisconnectedData& from);
  void MergeFrom(const DisconnectedData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisconnectedData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .txdata.ConnectionInfo Info = 1;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 1;
  private:
  const ::txdata::ConnectionInfo& _internal_info() const;
  public:
  const ::txdata::ConnectionInfo& info() const;
  ::txdata::ConnectionInfo* release_info();
  ::txdata::ConnectionInfo* mutable_info();
  void set_allocated_info(::txdata::ConnectionInfo* info);

  // @@protoc_insertion_point(class_scope:txdata.DisconnectedData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::txdata::ConnectionInfo* info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_txdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExecuteCommandReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txdata.ExecuteCommandReq) */ {
 public:
  ExecuteCommandReq();
  virtual ~ExecuteCommandReq();

  ExecuteCommandReq(const ExecuteCommandReq& from);

  inline ExecuteCommandReq& operator=(const ExecuteCommandReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecuteCommandReq(ExecuteCommandReq&& from) noexcept
    : ExecuteCommandReq() {
    *this = ::std::move(from);
  }

  inline ExecuteCommandReq& operator=(ExecuteCommandReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecuteCommandReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecuteCommandReq* internal_default_instance() {
    return reinterpret_cast<const ExecuteCommandReq*>(
               &_ExecuteCommandReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ExecuteCommandReq* other);
  friend void swap(ExecuteCommandReq& a, ExecuteCommandReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecuteCommandReq* New() const final {
    return CreateMaybeMessage<ExecuteCommandReq>(NULL);
  }

  ExecuteCommandReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteCommandReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecuteCommandReq& from);
  void MergeFrom(const ExecuteCommandReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteCommandReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string Pathway = 2;
  int pathway_size() const;
  void clear_pathway();
  static const int kPathwayFieldNumber = 2;
  const ::std::string& pathway(int index) const;
  ::std::string* mutable_pathway(int index);
  void set_pathway(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_pathway(int index, ::std::string&& value);
  #endif
  void set_pathway(int index, const char* value);
  void set_pathway(int index, const char* value, size_t size);
  ::std::string* add_pathway();
  void add_pathway(const ::std::string& value);
  #if LANG_CXX11
  void add_pathway(::std::string&& value);
  #endif
  void add_pathway(const char* value);
  void add_pathway(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& pathway() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pathway();

  // string Command = 3;
  void clear_command();
  static const int kCommandFieldNumber = 3;
  const ::std::string& command() const;
  void set_command(const ::std::string& value);
  #if LANG_CXX11
  void set_command(::std::string&& value);
  #endif
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  ::std::string* mutable_command();
  ::std::string* release_command();
  void set_allocated_command(::std::string* command);

  // int64 RequestID = 1;
  void clear_requestid();
  static const int kRequestIDFieldNumber = 1;
  ::google::protobuf::int64 requestid() const;
  void set_requestid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:txdata.ExecuteCommandReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pathway_;
  ::google::protobuf::internal::ArenaStringPtr command_;
  ::google::protobuf::int64 requestid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_txdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExecuteCommandRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txdata.ExecuteCommandRsp) */ {
 public:
  ExecuteCommandRsp();
  virtual ~ExecuteCommandRsp();

  ExecuteCommandRsp(const ExecuteCommandRsp& from);

  inline ExecuteCommandRsp& operator=(const ExecuteCommandRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecuteCommandRsp(ExecuteCommandRsp&& from) noexcept
    : ExecuteCommandRsp() {
    *this = ::std::move(from);
  }

  inline ExecuteCommandRsp& operator=(ExecuteCommandRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecuteCommandRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecuteCommandRsp* internal_default_instance() {
    return reinterpret_cast<const ExecuteCommandRsp*>(
               &_ExecuteCommandRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ExecuteCommandRsp* other);
  friend void swap(ExecuteCommandRsp& a, ExecuteCommandRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecuteCommandRsp* New() const final {
    return CreateMaybeMessage<ExecuteCommandRsp>(NULL);
  }

  ExecuteCommandRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteCommandRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecuteCommandRsp& from);
  void MergeFrom(const ExecuteCommandRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteCommandRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string UserID = 2;
  void clear_userid();
  static const int kUserIDFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // string Result = 3;
  void clear_result();
  static const int kResultFieldNumber = 3;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  #if LANG_CXX11
  void set_result(::std::string&& value);
  #endif
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // string ErrMsg = 5;
  void clear_errmsg();
  static const int kErrMsgFieldNumber = 5;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // int64 RequestID = 1;
  void clear_requestid();
  static const int kRequestIDFieldNumber = 1;
  ::google::protobuf::int64 requestid() const;
  void set_requestid(::google::protobuf::int64 value);

  // int32 ErrNo = 4;
  void clear_errno();
  static const int kErrNoFieldNumber = 4;
  ::google::protobuf::int32 errno() const;
  void set_errno(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:txdata.ExecuteCommandRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::google::protobuf::int64 requestid_;
  ::google::protobuf::int32 errno_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_txdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommonNtosReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txdata.CommonNtosReq) */ {
 public:
  CommonNtosReq();
  virtual ~CommonNtosReq();

  CommonNtosReq(const CommonNtosReq& from);

  inline CommonNtosReq& operator=(const CommonNtosReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommonNtosReq(CommonNtosReq&& from) noexcept
    : CommonNtosReq() {
    *this = ::std::move(from);
  }

  inline CommonNtosReq& operator=(CommonNtosReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonNtosReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonNtosReq* internal_default_instance() {
    return reinterpret_cast<const CommonNtosReq*>(
               &_CommonNtosReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CommonNtosReq* other);
  friend void swap(CommonNtosReq& a, CommonNtosReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommonNtosReq* New() const final {
    return CreateMaybeMessage<CommonNtosReq>(NULL);
  }

  CommonNtosReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommonNtosReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommonNtosReq& from);
  void MergeFrom(const CommonNtosReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonNtosReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string UserID = 2;
  void clear_userid();
  static const int kUserIDFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // string DataType = 5;
  void clear_datatype();
  static const int kDataTypeFieldNumber = 5;
  const ::std::string& datatype() const;
  void set_datatype(const ::std::string& value);
  #if LANG_CXX11
  void set_datatype(::std::string&& value);
  #endif
  void set_datatype(const char* value);
  void set_datatype(const char* value, size_t size);
  ::std::string* mutable_datatype();
  ::std::string* release_datatype();
  void set_allocated_datatype(::std::string* datatype);

  // bytes Data = 6;
  void clear_data();
  static const int kDataFieldNumber = 6;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .google.protobuf.Timestamp ReqTime = 7;
  bool has_reqtime() const;
  void clear_reqtime();
  static const int kReqTimeFieldNumber = 7;
  private:
  const ::google::protobuf::Timestamp& _internal_reqtime() const;
  public:
  const ::google::protobuf::Timestamp& reqtime() const;
  ::google::protobuf::Timestamp* release_reqtime();
  ::google::protobuf::Timestamp* mutable_reqtime();
  void set_allocated_reqtime(::google::protobuf::Timestamp* reqtime);

  // int64 RequestID = 1;
  void clear_requestid();
  static const int kRequestIDFieldNumber = 1;
  ::google::protobuf::int64 requestid() const;
  void set_requestid(::google::protobuf::int64 value);

  // int64 SeqNo = 3;
  void clear_seqno();
  static const int kSeqNoFieldNumber = 3;
  ::google::protobuf::int64 seqno() const;
  void set_seqno(::google::protobuf::int64 value);

  // bool Endeavour = 4;
  void clear_endeavour();
  static const int kEndeavourFieldNumber = 4;
  bool endeavour() const;
  void set_endeavour(bool value);

  // @@protoc_insertion_point(class_scope:txdata.CommonNtosReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr datatype_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::Timestamp* reqtime_;
  ::google::protobuf::int64 requestid_;
  ::google::protobuf::int64 seqno_;
  bool endeavour_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_txdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommonNtosRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txdata.CommonNtosRsp) */ {
 public:
  CommonNtosRsp();
  virtual ~CommonNtosRsp();

  CommonNtosRsp(const CommonNtosRsp& from);

  inline CommonNtosRsp& operator=(const CommonNtosRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommonNtosRsp(CommonNtosRsp&& from) noexcept
    : CommonNtosRsp() {
    *this = ::std::move(from);
  }

  inline CommonNtosRsp& operator=(CommonNtosRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonNtosRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonNtosRsp* internal_default_instance() {
    return reinterpret_cast<const CommonNtosRsp*>(
               &_CommonNtosRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CommonNtosRsp* other);
  friend void swap(CommonNtosRsp& a, CommonNtosRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommonNtosRsp* New() const final {
    return CreateMaybeMessage<CommonNtosRsp>(NULL);
  }

  CommonNtosRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommonNtosRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommonNtosRsp& from);
  void MergeFrom(const CommonNtosRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonNtosRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string Pathway = 2;
  int pathway_size() const;
  void clear_pathway();
  static const int kPathwayFieldNumber = 2;
  const ::std::string& pathway(int index) const;
  ::std::string* mutable_pathway(int index);
  void set_pathway(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_pathway(int index, ::std::string&& value);
  #endif
  void set_pathway(int index, const char* value);
  void set_pathway(int index, const char* value, size_t size);
  ::std::string* add_pathway();
  void add_pathway(const ::std::string& value);
  #if LANG_CXX11
  void add_pathway(::std::string&& value);
  #endif
  void add_pathway(const char* value);
  void add_pathway(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& pathway() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pathway();

  // string ErrMsg = 5;
  void clear_errmsg();
  static const int kErrMsgFieldNumber = 5;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // int64 RequestID = 1;
  void clear_requestid();
  static const int kRequestIDFieldNumber = 1;
  ::google::protobuf::int64 requestid() const;
  void set_requestid(::google::protobuf::int64 value);

  // int64 SeqNo = 3;
  void clear_seqno();
  static const int kSeqNoFieldNumber = 3;
  ::google::protobuf::int64 seqno() const;
  void set_seqno(::google::protobuf::int64 value);

  // int32 ErrNo = 4;
  void clear_errno();
  static const int kErrNoFieldNumber = 4;
  ::google::protobuf::int32 errno() const;
  void set_errno(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:txdata.CommonNtosRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pathway_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::google::protobuf::int64 requestid_;
  ::google::protobuf::int64 seqno_;
  ::google::protobuf::int32 errno_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_txdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReportDataItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txdata.ReportDataItem) */ {
 public:
  ReportDataItem();
  virtual ~ReportDataItem();

  ReportDataItem(const ReportDataItem& from);

  inline ReportDataItem& operator=(const ReportDataItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReportDataItem(ReportDataItem&& from) noexcept
    : ReportDataItem() {
    *this = ::std::move(from);
  }

  inline ReportDataItem& operator=(ReportDataItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportDataItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportDataItem* internal_default_instance() {
    return reinterpret_cast<const ReportDataItem*>(
               &_ReportDataItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ReportDataItem* other);
  friend void swap(ReportDataItem& a, ReportDataItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReportDataItem* New() const final {
    return CreateMaybeMessage<ReportDataItem>(NULL);
  }

  ReportDataItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReportDataItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReportDataItem& from);
  void MergeFrom(const ReportDataItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportDataItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // string Data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:txdata.ReportDataItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_txdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendMailItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txdata.SendMailItem) */ {
 public:
  SendMailItem();
  virtual ~SendMailItem();

  SendMailItem(const SendMailItem& from);

  inline SendMailItem& operator=(const SendMailItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendMailItem(SendMailItem&& from) noexcept
    : SendMailItem() {
    *this = ::std::move(from);
  }

  inline SendMailItem& operator=(SendMailItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendMailItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendMailItem* internal_default_instance() {
    return reinterpret_cast<const SendMailItem*>(
               &_SendMailItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(SendMailItem* other);
  friend void swap(SendMailItem& a, SendMailItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendMailItem* New() const final {
    return CreateMaybeMessage<SendMailItem>(NULL);
  }

  SendMailItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendMailItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendMailItem& from);
  void MergeFrom(const SendMailItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMailItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string Password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string SmtpAddr = 3;
  void clear_smtpaddr();
  static const int kSmtpAddrFieldNumber = 3;
  const ::std::string& smtpaddr() const;
  void set_smtpaddr(const ::std::string& value);
  #if LANG_CXX11
  void set_smtpaddr(::std::string&& value);
  #endif
  void set_smtpaddr(const char* value);
  void set_smtpaddr(const char* value, size_t size);
  ::std::string* mutable_smtpaddr();
  ::std::string* release_smtpaddr();
  void set_allocated_smtpaddr(::std::string* smtpaddr);

  // string To = 4;
  void clear_to();
  static const int kToFieldNumber = 4;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // string Subject = 5;
  void clear_subject();
  static const int kSubjectFieldNumber = 5;
  const ::std::string& subject() const;
  void set_subject(const ::std::string& value);
  #if LANG_CXX11
  void set_subject(::std::string&& value);
  #endif
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  ::std::string* mutable_subject();
  ::std::string* release_subject();
  void set_allocated_subject(::std::string* subject);

  // string ContentType = 6;
  void clear_contenttype();
  static const int kContentTypeFieldNumber = 6;
  const ::std::string& contenttype() const;
  void set_contenttype(const ::std::string& value);
  #if LANG_CXX11
  void set_contenttype(::std::string&& value);
  #endif
  void set_contenttype(const char* value);
  void set_contenttype(const char* value, size_t size);
  ::std::string* mutable_contenttype();
  ::std::string* release_contenttype();
  void set_allocated_contenttype(::std::string* contenttype);

  // string Content = 7;
  void clear_content();
  static const int kContentFieldNumber = 7;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:txdata.SendMailItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr smtpaddr_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr subject_;
  ::google::protobuf::internal::ArenaStringPtr contenttype_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_txdata_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConnectionInfo

// string UserID = 1;
inline void ConnectionInfo::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectionInfo::userid() const {
  // @@protoc_insertion_point(field_get:txdata.ConnectionInfo.UserID)
  return userid_.GetNoArena();
}
inline void ConnectionInfo::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.ConnectionInfo.UserID)
}
#if LANG_CXX11
inline void ConnectionInfo::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.ConnectionInfo.UserID)
}
#endif
inline void ConnectionInfo::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.ConnectionInfo.UserID)
}
inline void ConnectionInfo::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.ConnectionInfo.UserID)
}
inline ::std::string* ConnectionInfo::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:txdata.ConnectionInfo.UserID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionInfo::release_userid() {
  // @@protoc_insertion_point(field_release:txdata.ConnectionInfo.UserID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionInfo::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:txdata.ConnectionInfo.UserID)
}

// string BelongID = 2;
inline void ConnectionInfo::clear_belongid() {
  belongid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectionInfo::belongid() const {
  // @@protoc_insertion_point(field_get:txdata.ConnectionInfo.BelongID)
  return belongid_.GetNoArena();
}
inline void ConnectionInfo::set_belongid(const ::std::string& value) {
  
  belongid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.ConnectionInfo.BelongID)
}
#if LANG_CXX11
inline void ConnectionInfo::set_belongid(::std::string&& value) {
  
  belongid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.ConnectionInfo.BelongID)
}
#endif
inline void ConnectionInfo::set_belongid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  belongid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.ConnectionInfo.BelongID)
}
inline void ConnectionInfo::set_belongid(const char* value, size_t size) {
  
  belongid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.ConnectionInfo.BelongID)
}
inline ::std::string* ConnectionInfo::mutable_belongid() {
  
  // @@protoc_insertion_point(field_mutable:txdata.ConnectionInfo.BelongID)
  return belongid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionInfo::release_belongid() {
  // @@protoc_insertion_point(field_release:txdata.ConnectionInfo.BelongID)
  
  return belongid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionInfo::set_allocated_belongid(::std::string* belongid) {
  if (belongid != NULL) {
    
  } else {
    
  }
  belongid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), belongid);
  // @@protoc_insertion_point(field_set_allocated:txdata.ConnectionInfo.BelongID)
}

// string Version = 3;
inline void ConnectionInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectionInfo::version() const {
  // @@protoc_insertion_point(field_get:txdata.ConnectionInfo.Version)
  return version_.GetNoArena();
}
inline void ConnectionInfo::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.ConnectionInfo.Version)
}
#if LANG_CXX11
inline void ConnectionInfo::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.ConnectionInfo.Version)
}
#endif
inline void ConnectionInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.ConnectionInfo.Version)
}
inline void ConnectionInfo::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.ConnectionInfo.Version)
}
inline ::std::string* ConnectionInfo::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:txdata.ConnectionInfo.Version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionInfo::release_version() {
  // @@protoc_insertion_point(field_release:txdata.ConnectionInfo.Version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:txdata.ConnectionInfo.Version)
}

// .txdata.ProgramType ExeType = 4;
inline void ConnectionInfo::clear_exetype() {
  exetype_ = 0;
}
inline ::txdata::ProgramType ConnectionInfo::exetype() const {
  // @@protoc_insertion_point(field_get:txdata.ConnectionInfo.ExeType)
  return static_cast< ::txdata::ProgramType >(exetype_);
}
inline void ConnectionInfo::set_exetype(::txdata::ProgramType value) {
  
  exetype_ = value;
  // @@protoc_insertion_point(field_set:txdata.ConnectionInfo.ExeType)
}

// bool IsLeaf = 5;
inline void ConnectionInfo::clear_isleaf() {
  isleaf_ = false;
}
inline bool ConnectionInfo::isleaf() const {
  // @@protoc_insertion_point(field_get:txdata.ConnectionInfo.IsLeaf)
  return isleaf_;
}
inline void ConnectionInfo::set_isleaf(bool value) {
  
  isleaf_ = value;
  // @@protoc_insertion_point(field_set:txdata.ConnectionInfo.IsLeaf)
}

// .txdata.ConnectionInfo.LinkType LinkMode = 6;
inline void ConnectionInfo::clear_linkmode() {
  linkmode_ = 0;
}
inline ::txdata::ConnectionInfo_LinkType ConnectionInfo::linkmode() const {
  // @@protoc_insertion_point(field_get:txdata.ConnectionInfo.LinkMode)
  return static_cast< ::txdata::ConnectionInfo_LinkType >(linkmode_);
}
inline void ConnectionInfo::set_linkmode(::txdata::ConnectionInfo_LinkType value) {
  
  linkmode_ = value;
  // @@protoc_insertion_point(field_set:txdata.ConnectionInfo.LinkMode)
}

// int32 ExePid = 7;
inline void ConnectionInfo::clear_exepid() {
  exepid_ = 0;
}
inline ::google::protobuf::int32 ConnectionInfo::exepid() const {
  // @@protoc_insertion_point(field_get:txdata.ConnectionInfo.ExePid)
  return exepid_;
}
inline void ConnectionInfo::set_exepid(::google::protobuf::int32 value) {
  
  exepid_ = value;
  // @@protoc_insertion_point(field_set:txdata.ConnectionInfo.ExePid)
}

// string ExePath = 8;
inline void ConnectionInfo::clear_exepath() {
  exepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectionInfo::exepath() const {
  // @@protoc_insertion_point(field_get:txdata.ConnectionInfo.ExePath)
  return exepath_.GetNoArena();
}
inline void ConnectionInfo::set_exepath(const ::std::string& value) {
  
  exepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.ConnectionInfo.ExePath)
}
#if LANG_CXX11
inline void ConnectionInfo::set_exepath(::std::string&& value) {
  
  exepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.ConnectionInfo.ExePath)
}
#endif
inline void ConnectionInfo::set_exepath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.ConnectionInfo.ExePath)
}
inline void ConnectionInfo::set_exepath(const char* value, size_t size) {
  
  exepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.ConnectionInfo.ExePath)
}
inline ::std::string* ConnectionInfo::mutable_exepath() {
  
  // @@protoc_insertion_point(field_mutable:txdata.ConnectionInfo.ExePath)
  return exepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionInfo::release_exepath() {
  // @@protoc_insertion_point(field_release:txdata.ConnectionInfo.ExePath)
  
  return exepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionInfo::set_allocated_exepath(::std::string* exepath) {
  if (exepath != NULL) {
    
  } else {
    
  }
  exepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exepath);
  // @@protoc_insertion_point(field_set_allocated:txdata.ConnectionInfo.ExePath)
}

// -------------------------------------------------------------------

// ConnectedData

// .txdata.ConnectionInfo Info = 1;
inline bool ConnectedData::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void ConnectedData::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
}
inline const ::txdata::ConnectionInfo& ConnectedData::_internal_info() const {
  return *info_;
}
inline const ::txdata::ConnectionInfo& ConnectedData::info() const {
  const ::txdata::ConnectionInfo* p = info_;
  // @@protoc_insertion_point(field_get:txdata.ConnectedData.Info)
  return p != NULL ? *p : *reinterpret_cast<const ::txdata::ConnectionInfo*>(
      &::txdata::_ConnectionInfo_default_instance_);
}
inline ::txdata::ConnectionInfo* ConnectedData::release_info() {
  // @@protoc_insertion_point(field_release:txdata.ConnectedData.Info)
  
  ::txdata::ConnectionInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline ::txdata::ConnectionInfo* ConnectedData::mutable_info() {
  
  if (info_ == NULL) {
    auto* p = CreateMaybeMessage<::txdata::ConnectionInfo>(GetArenaNoVirtual());
    info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:txdata.ConnectedData.Info)
  return info_;
}
inline void ConnectedData::set_allocated_info(::txdata::ConnectionInfo* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete info_;
  }
  if (info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:txdata.ConnectedData.Info)
}

// repeated string Pathway = 2;
inline int ConnectedData::pathway_size() const {
  return pathway_.size();
}
inline void ConnectedData::clear_pathway() {
  pathway_.Clear();
}
inline const ::std::string& ConnectedData::pathway(int index) const {
  // @@protoc_insertion_point(field_get:txdata.ConnectedData.Pathway)
  return pathway_.Get(index);
}
inline ::std::string* ConnectedData::mutable_pathway(int index) {
  // @@protoc_insertion_point(field_mutable:txdata.ConnectedData.Pathway)
  return pathway_.Mutable(index);
}
inline void ConnectedData::set_pathway(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:txdata.ConnectedData.Pathway)
  pathway_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ConnectedData::set_pathway(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:txdata.ConnectedData.Pathway)
  pathway_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ConnectedData::set_pathway(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  pathway_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txdata.ConnectedData.Pathway)
}
inline void ConnectedData::set_pathway(int index, const char* value, size_t size) {
  pathway_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txdata.ConnectedData.Pathway)
}
inline ::std::string* ConnectedData::add_pathway() {
  // @@protoc_insertion_point(field_add_mutable:txdata.ConnectedData.Pathway)
  return pathway_.Add();
}
inline void ConnectedData::add_pathway(const ::std::string& value) {
  pathway_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:txdata.ConnectedData.Pathway)
}
#if LANG_CXX11
inline void ConnectedData::add_pathway(::std::string&& value) {
  pathway_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:txdata.ConnectedData.Pathway)
}
#endif
inline void ConnectedData::add_pathway(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  pathway_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txdata.ConnectedData.Pathway)
}
inline void ConnectedData::add_pathway(const char* value, size_t size) {
  pathway_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txdata.ConnectedData.Pathway)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ConnectedData::pathway() const {
  // @@protoc_insertion_point(field_list:txdata.ConnectedData.Pathway)
  return pathway_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ConnectedData::mutable_pathway() {
  // @@protoc_insertion_point(field_mutable_list:txdata.ConnectedData.Pathway)
  return &pathway_;
}

// -------------------------------------------------------------------

// DisconnectedData

// .txdata.ConnectionInfo Info = 1;
inline bool DisconnectedData::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void DisconnectedData::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
}
inline const ::txdata::ConnectionInfo& DisconnectedData::_internal_info() const {
  return *info_;
}
inline const ::txdata::ConnectionInfo& DisconnectedData::info() const {
  const ::txdata::ConnectionInfo* p = info_;
  // @@protoc_insertion_point(field_get:txdata.DisconnectedData.Info)
  return p != NULL ? *p : *reinterpret_cast<const ::txdata::ConnectionInfo*>(
      &::txdata::_ConnectionInfo_default_instance_);
}
inline ::txdata::ConnectionInfo* DisconnectedData::release_info() {
  // @@protoc_insertion_point(field_release:txdata.DisconnectedData.Info)
  
  ::txdata::ConnectionInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline ::txdata::ConnectionInfo* DisconnectedData::mutable_info() {
  
  if (info_ == NULL) {
    auto* p = CreateMaybeMessage<::txdata::ConnectionInfo>(GetArenaNoVirtual());
    info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:txdata.DisconnectedData.Info)
  return info_;
}
inline void DisconnectedData::set_allocated_info(::txdata::ConnectionInfo* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete info_;
  }
  if (info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:txdata.DisconnectedData.Info)
}

// -------------------------------------------------------------------

// ExecuteCommandReq

// int64 RequestID = 1;
inline void ExecuteCommandReq::clear_requestid() {
  requestid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ExecuteCommandReq::requestid() const {
  // @@protoc_insertion_point(field_get:txdata.ExecuteCommandReq.RequestID)
  return requestid_;
}
inline void ExecuteCommandReq::set_requestid(::google::protobuf::int64 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:txdata.ExecuteCommandReq.RequestID)
}

// repeated string Pathway = 2;
inline int ExecuteCommandReq::pathway_size() const {
  return pathway_.size();
}
inline void ExecuteCommandReq::clear_pathway() {
  pathway_.Clear();
}
inline const ::std::string& ExecuteCommandReq::pathway(int index) const {
  // @@protoc_insertion_point(field_get:txdata.ExecuteCommandReq.Pathway)
  return pathway_.Get(index);
}
inline ::std::string* ExecuteCommandReq::mutable_pathway(int index) {
  // @@protoc_insertion_point(field_mutable:txdata.ExecuteCommandReq.Pathway)
  return pathway_.Mutable(index);
}
inline void ExecuteCommandReq::set_pathway(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:txdata.ExecuteCommandReq.Pathway)
  pathway_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ExecuteCommandReq::set_pathway(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:txdata.ExecuteCommandReq.Pathway)
  pathway_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ExecuteCommandReq::set_pathway(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  pathway_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txdata.ExecuteCommandReq.Pathway)
}
inline void ExecuteCommandReq::set_pathway(int index, const char* value, size_t size) {
  pathway_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txdata.ExecuteCommandReq.Pathway)
}
inline ::std::string* ExecuteCommandReq::add_pathway() {
  // @@protoc_insertion_point(field_add_mutable:txdata.ExecuteCommandReq.Pathway)
  return pathway_.Add();
}
inline void ExecuteCommandReq::add_pathway(const ::std::string& value) {
  pathway_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:txdata.ExecuteCommandReq.Pathway)
}
#if LANG_CXX11
inline void ExecuteCommandReq::add_pathway(::std::string&& value) {
  pathway_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:txdata.ExecuteCommandReq.Pathway)
}
#endif
inline void ExecuteCommandReq::add_pathway(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  pathway_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txdata.ExecuteCommandReq.Pathway)
}
inline void ExecuteCommandReq::add_pathway(const char* value, size_t size) {
  pathway_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txdata.ExecuteCommandReq.Pathway)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ExecuteCommandReq::pathway() const {
  // @@protoc_insertion_point(field_list:txdata.ExecuteCommandReq.Pathway)
  return pathway_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ExecuteCommandReq::mutable_pathway() {
  // @@protoc_insertion_point(field_mutable_list:txdata.ExecuteCommandReq.Pathway)
  return &pathway_;
}

// string Command = 3;
inline void ExecuteCommandReq::clear_command() {
  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecuteCommandReq::command() const {
  // @@protoc_insertion_point(field_get:txdata.ExecuteCommandReq.Command)
  return command_.GetNoArena();
}
inline void ExecuteCommandReq::set_command(const ::std::string& value) {
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.ExecuteCommandReq.Command)
}
#if LANG_CXX11
inline void ExecuteCommandReq::set_command(::std::string&& value) {
  
  command_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.ExecuteCommandReq.Command)
}
#endif
inline void ExecuteCommandReq::set_command(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.ExecuteCommandReq.Command)
}
inline void ExecuteCommandReq::set_command(const char* value, size_t size) {
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.ExecuteCommandReq.Command)
}
inline ::std::string* ExecuteCommandReq::mutable_command() {
  
  // @@protoc_insertion_point(field_mutable:txdata.ExecuteCommandReq.Command)
  return command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecuteCommandReq::release_command() {
  // @@protoc_insertion_point(field_release:txdata.ExecuteCommandReq.Command)
  
  return command_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecuteCommandReq::set_allocated_command(::std::string* command) {
  if (command != NULL) {
    
  } else {
    
  }
  command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:txdata.ExecuteCommandReq.Command)
}

// -------------------------------------------------------------------

// ExecuteCommandRsp

// int64 RequestID = 1;
inline void ExecuteCommandRsp::clear_requestid() {
  requestid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ExecuteCommandRsp::requestid() const {
  // @@protoc_insertion_point(field_get:txdata.ExecuteCommandRsp.RequestID)
  return requestid_;
}
inline void ExecuteCommandRsp::set_requestid(::google::protobuf::int64 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:txdata.ExecuteCommandRsp.RequestID)
}

// string UserID = 2;
inline void ExecuteCommandRsp::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecuteCommandRsp::userid() const {
  // @@protoc_insertion_point(field_get:txdata.ExecuteCommandRsp.UserID)
  return userid_.GetNoArena();
}
inline void ExecuteCommandRsp::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.ExecuteCommandRsp.UserID)
}
#if LANG_CXX11
inline void ExecuteCommandRsp::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.ExecuteCommandRsp.UserID)
}
#endif
inline void ExecuteCommandRsp::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.ExecuteCommandRsp.UserID)
}
inline void ExecuteCommandRsp::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.ExecuteCommandRsp.UserID)
}
inline ::std::string* ExecuteCommandRsp::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:txdata.ExecuteCommandRsp.UserID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecuteCommandRsp::release_userid() {
  // @@protoc_insertion_point(field_release:txdata.ExecuteCommandRsp.UserID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecuteCommandRsp::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:txdata.ExecuteCommandRsp.UserID)
}

// string Result = 3;
inline void ExecuteCommandRsp::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecuteCommandRsp::result() const {
  // @@protoc_insertion_point(field_get:txdata.ExecuteCommandRsp.Result)
  return result_.GetNoArena();
}
inline void ExecuteCommandRsp::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.ExecuteCommandRsp.Result)
}
#if LANG_CXX11
inline void ExecuteCommandRsp::set_result(::std::string&& value) {
  
  result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.ExecuteCommandRsp.Result)
}
#endif
inline void ExecuteCommandRsp::set_result(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.ExecuteCommandRsp.Result)
}
inline void ExecuteCommandRsp::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.ExecuteCommandRsp.Result)
}
inline ::std::string* ExecuteCommandRsp::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:txdata.ExecuteCommandRsp.Result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecuteCommandRsp::release_result() {
  // @@protoc_insertion_point(field_release:txdata.ExecuteCommandRsp.Result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecuteCommandRsp::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:txdata.ExecuteCommandRsp.Result)
}

// int32 ErrNo = 4;
inline void ExecuteCommandRsp::clear_errno() {
  errno_ = 0;
}
inline ::google::protobuf::int32 ExecuteCommandRsp::errno() const {
  // @@protoc_insertion_point(field_get:txdata.ExecuteCommandRsp.ErrNo)
  return errno_;
}
inline void ExecuteCommandRsp::set_errno(::google::protobuf::int32 value) {
  
  errno_ = value;
  // @@protoc_insertion_point(field_set:txdata.ExecuteCommandRsp.ErrNo)
}

// string ErrMsg = 5;
inline void ExecuteCommandRsp::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecuteCommandRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:txdata.ExecuteCommandRsp.ErrMsg)
  return errmsg_.GetNoArena();
}
inline void ExecuteCommandRsp::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.ExecuteCommandRsp.ErrMsg)
}
#if LANG_CXX11
inline void ExecuteCommandRsp::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.ExecuteCommandRsp.ErrMsg)
}
#endif
inline void ExecuteCommandRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.ExecuteCommandRsp.ErrMsg)
}
inline void ExecuteCommandRsp::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.ExecuteCommandRsp.ErrMsg)
}
inline ::std::string* ExecuteCommandRsp::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:txdata.ExecuteCommandRsp.ErrMsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecuteCommandRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:txdata.ExecuteCommandRsp.ErrMsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecuteCommandRsp::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:txdata.ExecuteCommandRsp.ErrMsg)
}

// -------------------------------------------------------------------

// CommonNtosReq

// int64 RequestID = 1;
inline void CommonNtosReq::clear_requestid() {
  requestid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CommonNtosReq::requestid() const {
  // @@protoc_insertion_point(field_get:txdata.CommonNtosReq.RequestID)
  return requestid_;
}
inline void CommonNtosReq::set_requestid(::google::protobuf::int64 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:txdata.CommonNtosReq.RequestID)
}

// string UserID = 2;
inline void CommonNtosReq::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommonNtosReq::userid() const {
  // @@protoc_insertion_point(field_get:txdata.CommonNtosReq.UserID)
  return userid_.GetNoArena();
}
inline void CommonNtosReq::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.CommonNtosReq.UserID)
}
#if LANG_CXX11
inline void CommonNtosReq::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.CommonNtosReq.UserID)
}
#endif
inline void CommonNtosReq::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.CommonNtosReq.UserID)
}
inline void CommonNtosReq::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.CommonNtosReq.UserID)
}
inline ::std::string* CommonNtosReq::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:txdata.CommonNtosReq.UserID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonNtosReq::release_userid() {
  // @@protoc_insertion_point(field_release:txdata.CommonNtosReq.UserID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonNtosReq::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:txdata.CommonNtosReq.UserID)
}

// int64 SeqNo = 3;
inline void CommonNtosReq::clear_seqno() {
  seqno_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CommonNtosReq::seqno() const {
  // @@protoc_insertion_point(field_get:txdata.CommonNtosReq.SeqNo)
  return seqno_;
}
inline void CommonNtosReq::set_seqno(::google::protobuf::int64 value) {
  
  seqno_ = value;
  // @@protoc_insertion_point(field_set:txdata.CommonNtosReq.SeqNo)
}

// bool Endeavour = 4;
inline void CommonNtosReq::clear_endeavour() {
  endeavour_ = false;
}
inline bool CommonNtosReq::endeavour() const {
  // @@protoc_insertion_point(field_get:txdata.CommonNtosReq.Endeavour)
  return endeavour_;
}
inline void CommonNtosReq::set_endeavour(bool value) {
  
  endeavour_ = value;
  // @@protoc_insertion_point(field_set:txdata.CommonNtosReq.Endeavour)
}

// string DataType = 5;
inline void CommonNtosReq::clear_datatype() {
  datatype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommonNtosReq::datatype() const {
  // @@protoc_insertion_point(field_get:txdata.CommonNtosReq.DataType)
  return datatype_.GetNoArena();
}
inline void CommonNtosReq::set_datatype(const ::std::string& value) {
  
  datatype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.CommonNtosReq.DataType)
}
#if LANG_CXX11
inline void CommonNtosReq::set_datatype(::std::string&& value) {
  
  datatype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.CommonNtosReq.DataType)
}
#endif
inline void CommonNtosReq::set_datatype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  datatype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.CommonNtosReq.DataType)
}
inline void CommonNtosReq::set_datatype(const char* value, size_t size) {
  
  datatype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.CommonNtosReq.DataType)
}
inline ::std::string* CommonNtosReq::mutable_datatype() {
  
  // @@protoc_insertion_point(field_mutable:txdata.CommonNtosReq.DataType)
  return datatype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonNtosReq::release_datatype() {
  // @@protoc_insertion_point(field_release:txdata.CommonNtosReq.DataType)
  
  return datatype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonNtosReq::set_allocated_datatype(::std::string* datatype) {
  if (datatype != NULL) {
    
  } else {
    
  }
  datatype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), datatype);
  // @@protoc_insertion_point(field_set_allocated:txdata.CommonNtosReq.DataType)
}

// bytes Data = 6;
inline void CommonNtosReq::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommonNtosReq::data() const {
  // @@protoc_insertion_point(field_get:txdata.CommonNtosReq.Data)
  return data_.GetNoArena();
}
inline void CommonNtosReq::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.CommonNtosReq.Data)
}
#if LANG_CXX11
inline void CommonNtosReq::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.CommonNtosReq.Data)
}
#endif
inline void CommonNtosReq::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.CommonNtosReq.Data)
}
inline void CommonNtosReq::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.CommonNtosReq.Data)
}
inline ::std::string* CommonNtosReq::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:txdata.CommonNtosReq.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonNtosReq::release_data() {
  // @@protoc_insertion_point(field_release:txdata.CommonNtosReq.Data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonNtosReq::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:txdata.CommonNtosReq.Data)
}

// .google.protobuf.Timestamp ReqTime = 7;
inline bool CommonNtosReq::has_reqtime() const {
  return this != internal_default_instance() && reqtime_ != NULL;
}
inline const ::google::protobuf::Timestamp& CommonNtosReq::_internal_reqtime() const {
  return *reqtime_;
}
inline const ::google::protobuf::Timestamp& CommonNtosReq::reqtime() const {
  const ::google::protobuf::Timestamp* p = reqtime_;
  // @@protoc_insertion_point(field_get:txdata.CommonNtosReq.ReqTime)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* CommonNtosReq::release_reqtime() {
  // @@protoc_insertion_point(field_release:txdata.CommonNtosReq.ReqTime)
  
  ::google::protobuf::Timestamp* temp = reqtime_;
  reqtime_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* CommonNtosReq::mutable_reqtime() {
  
  if (reqtime_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    reqtime_ = p;
  }
  // @@protoc_insertion_point(field_mutable:txdata.CommonNtosReq.ReqTime)
  return reqtime_;
}
inline void CommonNtosReq::set_allocated_reqtime(::google::protobuf::Timestamp* reqtime) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reqtime_);
  }
  if (reqtime) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(reqtime)->GetArena();
    if (message_arena != submessage_arena) {
      reqtime = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reqtime, submessage_arena);
    }
    
  } else {
    
  }
  reqtime_ = reqtime;
  // @@protoc_insertion_point(field_set_allocated:txdata.CommonNtosReq.ReqTime)
}

// -------------------------------------------------------------------

// CommonNtosRsp

// int64 RequestID = 1;
inline void CommonNtosRsp::clear_requestid() {
  requestid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CommonNtosRsp::requestid() const {
  // @@protoc_insertion_point(field_get:txdata.CommonNtosRsp.RequestID)
  return requestid_;
}
inline void CommonNtosRsp::set_requestid(::google::protobuf::int64 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:txdata.CommonNtosRsp.RequestID)
}

// repeated string Pathway = 2;
inline int CommonNtosRsp::pathway_size() const {
  return pathway_.size();
}
inline void CommonNtosRsp::clear_pathway() {
  pathway_.Clear();
}
inline const ::std::string& CommonNtosRsp::pathway(int index) const {
  // @@protoc_insertion_point(field_get:txdata.CommonNtosRsp.Pathway)
  return pathway_.Get(index);
}
inline ::std::string* CommonNtosRsp::mutable_pathway(int index) {
  // @@protoc_insertion_point(field_mutable:txdata.CommonNtosRsp.Pathway)
  return pathway_.Mutable(index);
}
inline void CommonNtosRsp::set_pathway(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:txdata.CommonNtosRsp.Pathway)
  pathway_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CommonNtosRsp::set_pathway(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:txdata.CommonNtosRsp.Pathway)
  pathway_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CommonNtosRsp::set_pathway(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  pathway_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txdata.CommonNtosRsp.Pathway)
}
inline void CommonNtosRsp::set_pathway(int index, const char* value, size_t size) {
  pathway_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txdata.CommonNtosRsp.Pathway)
}
inline ::std::string* CommonNtosRsp::add_pathway() {
  // @@protoc_insertion_point(field_add_mutable:txdata.CommonNtosRsp.Pathway)
  return pathway_.Add();
}
inline void CommonNtosRsp::add_pathway(const ::std::string& value) {
  pathway_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:txdata.CommonNtosRsp.Pathway)
}
#if LANG_CXX11
inline void CommonNtosRsp::add_pathway(::std::string&& value) {
  pathway_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:txdata.CommonNtosRsp.Pathway)
}
#endif
inline void CommonNtosRsp::add_pathway(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  pathway_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txdata.CommonNtosRsp.Pathway)
}
inline void CommonNtosRsp::add_pathway(const char* value, size_t size) {
  pathway_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txdata.CommonNtosRsp.Pathway)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CommonNtosRsp::pathway() const {
  // @@protoc_insertion_point(field_list:txdata.CommonNtosRsp.Pathway)
  return pathway_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CommonNtosRsp::mutable_pathway() {
  // @@protoc_insertion_point(field_mutable_list:txdata.CommonNtosRsp.Pathway)
  return &pathway_;
}

// int64 SeqNo = 3;
inline void CommonNtosRsp::clear_seqno() {
  seqno_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CommonNtosRsp::seqno() const {
  // @@protoc_insertion_point(field_get:txdata.CommonNtosRsp.SeqNo)
  return seqno_;
}
inline void CommonNtosRsp::set_seqno(::google::protobuf::int64 value) {
  
  seqno_ = value;
  // @@protoc_insertion_point(field_set:txdata.CommonNtosRsp.SeqNo)
}

// int32 ErrNo = 4;
inline void CommonNtosRsp::clear_errno() {
  errno_ = 0;
}
inline ::google::protobuf::int32 CommonNtosRsp::errno() const {
  // @@protoc_insertion_point(field_get:txdata.CommonNtosRsp.ErrNo)
  return errno_;
}
inline void CommonNtosRsp::set_errno(::google::protobuf::int32 value) {
  
  errno_ = value;
  // @@protoc_insertion_point(field_set:txdata.CommonNtosRsp.ErrNo)
}

// string ErrMsg = 5;
inline void CommonNtosRsp::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommonNtosRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:txdata.CommonNtosRsp.ErrMsg)
  return errmsg_.GetNoArena();
}
inline void CommonNtosRsp::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.CommonNtosRsp.ErrMsg)
}
#if LANG_CXX11
inline void CommonNtosRsp::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.CommonNtosRsp.ErrMsg)
}
#endif
inline void CommonNtosRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.CommonNtosRsp.ErrMsg)
}
inline void CommonNtosRsp::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.CommonNtosRsp.ErrMsg)
}
inline ::std::string* CommonNtosRsp::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:txdata.CommonNtosRsp.ErrMsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonNtosRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:txdata.CommonNtosRsp.ErrMsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonNtosRsp::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:txdata.CommonNtosRsp.ErrMsg)
}

// -------------------------------------------------------------------

// ReportDataItem

// string Topic = 1;
inline void ReportDataItem::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReportDataItem::topic() const {
  // @@protoc_insertion_point(field_get:txdata.ReportDataItem.Topic)
  return topic_.GetNoArena();
}
inline void ReportDataItem::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.ReportDataItem.Topic)
}
#if LANG_CXX11
inline void ReportDataItem::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.ReportDataItem.Topic)
}
#endif
inline void ReportDataItem::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.ReportDataItem.Topic)
}
inline void ReportDataItem::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.ReportDataItem.Topic)
}
inline ::std::string* ReportDataItem::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:txdata.ReportDataItem.Topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportDataItem::release_topic() {
  // @@protoc_insertion_point(field_release:txdata.ReportDataItem.Topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportDataItem::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:txdata.ReportDataItem.Topic)
}

// string Data = 2;
inline void ReportDataItem::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReportDataItem::data() const {
  // @@protoc_insertion_point(field_get:txdata.ReportDataItem.Data)
  return data_.GetNoArena();
}
inline void ReportDataItem::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.ReportDataItem.Data)
}
#if LANG_CXX11
inline void ReportDataItem::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.ReportDataItem.Data)
}
#endif
inline void ReportDataItem::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.ReportDataItem.Data)
}
inline void ReportDataItem::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.ReportDataItem.Data)
}
inline ::std::string* ReportDataItem::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:txdata.ReportDataItem.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportDataItem::release_data() {
  // @@protoc_insertion_point(field_release:txdata.ReportDataItem.Data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportDataItem::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:txdata.ReportDataItem.Data)
}

// -------------------------------------------------------------------

// SendMailItem

// string Username = 1;
inline void SendMailItem::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendMailItem::username() const {
  // @@protoc_insertion_point(field_get:txdata.SendMailItem.Username)
  return username_.GetNoArena();
}
inline void SendMailItem::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.SendMailItem.Username)
}
#if LANG_CXX11
inline void SendMailItem::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.SendMailItem.Username)
}
#endif
inline void SendMailItem::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.SendMailItem.Username)
}
inline void SendMailItem::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.SendMailItem.Username)
}
inline ::std::string* SendMailItem::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:txdata.SendMailItem.Username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMailItem::release_username() {
  // @@protoc_insertion_point(field_release:txdata.SendMailItem.Username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMailItem::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:txdata.SendMailItem.Username)
}

// string Password = 2;
inline void SendMailItem::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendMailItem::password() const {
  // @@protoc_insertion_point(field_get:txdata.SendMailItem.Password)
  return password_.GetNoArena();
}
inline void SendMailItem::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.SendMailItem.Password)
}
#if LANG_CXX11
inline void SendMailItem::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.SendMailItem.Password)
}
#endif
inline void SendMailItem::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.SendMailItem.Password)
}
inline void SendMailItem::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.SendMailItem.Password)
}
inline ::std::string* SendMailItem::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:txdata.SendMailItem.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMailItem::release_password() {
  // @@protoc_insertion_point(field_release:txdata.SendMailItem.Password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMailItem::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:txdata.SendMailItem.Password)
}

// string SmtpAddr = 3;
inline void SendMailItem::clear_smtpaddr() {
  smtpaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendMailItem::smtpaddr() const {
  // @@protoc_insertion_point(field_get:txdata.SendMailItem.SmtpAddr)
  return smtpaddr_.GetNoArena();
}
inline void SendMailItem::set_smtpaddr(const ::std::string& value) {
  
  smtpaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.SendMailItem.SmtpAddr)
}
#if LANG_CXX11
inline void SendMailItem::set_smtpaddr(::std::string&& value) {
  
  smtpaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.SendMailItem.SmtpAddr)
}
#endif
inline void SendMailItem::set_smtpaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smtpaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.SendMailItem.SmtpAddr)
}
inline void SendMailItem::set_smtpaddr(const char* value, size_t size) {
  
  smtpaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.SendMailItem.SmtpAddr)
}
inline ::std::string* SendMailItem::mutable_smtpaddr() {
  
  // @@protoc_insertion_point(field_mutable:txdata.SendMailItem.SmtpAddr)
  return smtpaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMailItem::release_smtpaddr() {
  // @@protoc_insertion_point(field_release:txdata.SendMailItem.SmtpAddr)
  
  return smtpaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMailItem::set_allocated_smtpaddr(::std::string* smtpaddr) {
  if (smtpaddr != NULL) {
    
  } else {
    
  }
  smtpaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smtpaddr);
  // @@protoc_insertion_point(field_set_allocated:txdata.SendMailItem.SmtpAddr)
}

// string To = 4;
inline void SendMailItem::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendMailItem::to() const {
  // @@protoc_insertion_point(field_get:txdata.SendMailItem.To)
  return to_.GetNoArena();
}
inline void SendMailItem::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.SendMailItem.To)
}
#if LANG_CXX11
inline void SendMailItem::set_to(::std::string&& value) {
  
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.SendMailItem.To)
}
#endif
inline void SendMailItem::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.SendMailItem.To)
}
inline void SendMailItem::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.SendMailItem.To)
}
inline ::std::string* SendMailItem::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:txdata.SendMailItem.To)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMailItem::release_to() {
  // @@protoc_insertion_point(field_release:txdata.SendMailItem.To)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMailItem::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:txdata.SendMailItem.To)
}

// string Subject = 5;
inline void SendMailItem::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendMailItem::subject() const {
  // @@protoc_insertion_point(field_get:txdata.SendMailItem.Subject)
  return subject_.GetNoArena();
}
inline void SendMailItem::set_subject(const ::std::string& value) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.SendMailItem.Subject)
}
#if LANG_CXX11
inline void SendMailItem::set_subject(::std::string&& value) {
  
  subject_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.SendMailItem.Subject)
}
#endif
inline void SendMailItem::set_subject(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.SendMailItem.Subject)
}
inline void SendMailItem::set_subject(const char* value, size_t size) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.SendMailItem.Subject)
}
inline ::std::string* SendMailItem::mutable_subject() {
  
  // @@protoc_insertion_point(field_mutable:txdata.SendMailItem.Subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMailItem::release_subject() {
  // @@protoc_insertion_point(field_release:txdata.SendMailItem.Subject)
  
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMailItem::set_allocated_subject(::std::string* subject) {
  if (subject != NULL) {
    
  } else {
    
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:txdata.SendMailItem.Subject)
}

// string ContentType = 6;
inline void SendMailItem::clear_contenttype() {
  contenttype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendMailItem::contenttype() const {
  // @@protoc_insertion_point(field_get:txdata.SendMailItem.ContentType)
  return contenttype_.GetNoArena();
}
inline void SendMailItem::set_contenttype(const ::std::string& value) {
  
  contenttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.SendMailItem.ContentType)
}
#if LANG_CXX11
inline void SendMailItem::set_contenttype(::std::string&& value) {
  
  contenttype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.SendMailItem.ContentType)
}
#endif
inline void SendMailItem::set_contenttype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  contenttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.SendMailItem.ContentType)
}
inline void SendMailItem::set_contenttype(const char* value, size_t size) {
  
  contenttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.SendMailItem.ContentType)
}
inline ::std::string* SendMailItem::mutable_contenttype() {
  
  // @@protoc_insertion_point(field_mutable:txdata.SendMailItem.ContentType)
  return contenttype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMailItem::release_contenttype() {
  // @@protoc_insertion_point(field_release:txdata.SendMailItem.ContentType)
  
  return contenttype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMailItem::set_allocated_contenttype(::std::string* contenttype) {
  if (contenttype != NULL) {
    
  } else {
    
  }
  contenttype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contenttype);
  // @@protoc_insertion_point(field_set_allocated:txdata.SendMailItem.ContentType)
}

// string Content = 7;
inline void SendMailItem::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendMailItem::content() const {
  // @@protoc_insertion_point(field_get:txdata.SendMailItem.Content)
  return content_.GetNoArena();
}
inline void SendMailItem::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txdata.SendMailItem.Content)
}
#if LANG_CXX11
inline void SendMailItem::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txdata.SendMailItem.Content)
}
#endif
inline void SendMailItem::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txdata.SendMailItem.Content)
}
inline void SendMailItem::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txdata.SendMailItem.Content)
}
inline ::std::string* SendMailItem::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:txdata.SendMailItem.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMailItem::release_content() {
  // @@protoc_insertion_point(field_release:txdata.SendMailItem.Content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMailItem::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:txdata.SendMailItem.Content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace txdata

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::txdata::ConnectionInfo_LinkType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::txdata::ConnectionInfo_LinkType>() {
  return ::txdata::ConnectionInfo_LinkType_descriptor();
}
template <> struct is_proto_enum< ::txdata::MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::txdata::MsgType>() {
  return ::txdata::MsgType_descriptor();
}
template <> struct is_proto_enum< ::txdata::ProgramType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::txdata::ProgramType>() {
  return ::txdata::ProgramType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_txdata_2eproto
