syntax = "proto3";

package txdata;

import public "google/protobuf/timestamp.proto";

// 注意: 务必要和各结构体的序号对应起来. 校验的命令如下所示:
// Linux  : grep    "^message" txdata.proto | awk -F" " 'BEGIN{cnt=0}{print"ID_"$2,"= "cnt++";"}'
// Linux  : grep    "^message" txdata.proto
// Windows: findstr "^message" txdata.proto
enum MsgType {
    Zero1               =  0;
    ID_DataPsh          =  1;
    ID_DataAck          =  2;
    ID_CommonReq        =  3;
    ID_CommonRsp        =  4;
    ID_ConnectionInfo   =  5;
    ID_ConnectReq       =  6;
    ID_ConnectRsp       =  7;
    ID_DisconnectedData =  8;
    ID_OnlineNotice     =  9;
    ID_ParentDataReq    = 10;
    ID_ParentDataRsp    = 11;
    ID_EchoItem         = 12;
    ID_SendMailItem     = 13;
    ID_ReportDataItem   = 14;
    ID_CommonErrMsg     = 15;
    ID_QueryRecordReq   = 16;
    ID_QueryRecordRsp   = 17;
}

//一个占位符结构体.
message DataPlaceholder {
}

//Push
message DataPsh {
    string  SenderID = 1;
    string  RecverID = 2;//为空,表示发送到根节点.
    string  UserID   = 3;//(UserID+SeqNo)唯一标识一个消息.
    int64   SeqNo    = 4;//(UserID+SeqNo)唯一标识一个消息.
    MsgType PshType  = 5;//传送的数据类型.
    bytes   PshData  = 6;//传送的数据内容.
    bool    UpCache  = 7;//紧邻的上游负有缓存本条数据的义务.
}

//Acknowledgement
message DataAck {
    string  SenderID = 1;
    string  RecverID = 2;//为空,表示发送到根节点.
    string  UserID   = 3;//(UserID+SeqNo)唯一标识一个消息.
    int64   SeqNo    = 4;//(UserID+SeqNo)唯一标识一个消息.
    MsgType AckType  = 5;//预留字段.
    bytes   AckData  = 6;//预留字段.
    int32   ErrNo    = 7;//中途发现无法到达对方,然后收到不可达的回复.
    string  ErrMsg   = 8;//对ErrNo的解释.
}

//(UserID+SeqNo)唯一指定一条消息.(SeqNo=0)表示这条消息不存数据库.(0<=SeqNo)
//(RequestID)是临时维护的递增值,-1:背景续传,0:上报模式,正:请求响应.
//模式1:上报模式,扔出去就不管了,此时RequestID=0和SeqNo=0
//模式2:请求响应模式,RequestID>0和SeqNo=0
//模式3:请求响应且安全,RequestID>0和SeqNo>0
//背景续传:RequestID=-1且SeqNo>0
message CommonReq {
    string                    SenderID    =  1;//消息的发送者.
    string                    CacherID    =  2;//消息的缓存者.(sender发送消息到cacher,cacher发送消息到recver)
    string                    RecverID    =  3;//消息的接收者.
    bool                      CrossServer =  4;
    int64                     RequestID   =  5;//(正:超时等待,要回响应);(零:不等待,不用回复响应);(负:背景上报,要回响应)
    int64                     SeqNo       =  6;//(正:缓存数据,发不过去要重试)(零:未缓存数据,发不过去就算了)(负:绝无可能)
    MsgType                   ReqType     =  7;
    bytes                     ReqData     =  8;
    google.protobuf.Timestamp ReqTime     =  9;
    int64                     RefNum      = 10;
}

//(FromServer==true && ErrNo!=0)的一个情况举例:SERVER收到了请求结构体,但是解析请求结构体失败,然后不知道怎么赋值响应结构体,便为ErrNo赋值.
message CommonRsp {
    string                    SenderID    =  1;
    string                    CacherID    =  2;
    string                    RecverID    =  3;
    bool                      CrossServer =  4;
    int64                     RequestID   =  5;
    int64                     SeqNo       =  6;
    MsgType                   RspType     =  7;
    bytes                     RspData     =  8;
    google.protobuf.Timestamp RspTime     =  9;
    int64                     RefNum      = 10;
    bool                      FromRecver  = 11;//响应消息是远端发过来的,不是(发送到中间端,因为断线导致路途不通,然后中间端发过来的消息).该消息已被远端处理,本端不用重传了.
    int32                     State       = 12;//在(1请求N响应)的情况下,最后一个响应的结束标志(目前把int当bool用).
    int32                     ErrNo       = 13;
    string                    ErrMsg      = 14;//对ErrNo的解释.
}

message ConnectionInfo {
    enum LinkType {
        Zero3   = 0;
        CONNECT = 1; //以client的身份,connect到server,建立起来的连接.
        ACCEPT  = 2; //以server的身份,accept,建立起来的连接.
    }
    bool      IsRoot    = 1;//是根节点.
    string    UserID    = 2;//由它的直属父亲检查数据合法性,检查通过之后,中转节点不再检查.
    string    BelongID  = 4;
    string    Version   = 5;//版本号
    LinkType  LinkMode  = 6;//连接方向
    int32     ExePid    = 7;//进程ID
    string    ExePath   = 8;//程序路径
    string    Remark    = 9;//备注
}

message ConnectReq {
    ConnectionInfo  InfoReq = 1;
    repeated string Pathway = 2;//两者之间要按顺序走哪些AGENT
/* ParentA:(父亲agent), ParentC1:(父亲client1), SonA:(儿子agent), GrandsonA:(孙子agent)
ParentA
│  ParentC1               ParentA收到的Pathway=[]
│  ParentC2               ParentA收到的Pathway=[]
│
└─SonA                    ParentA收到的Pathway=[SonA]
    │  SonC1              ParentA收到的Pathway=[SonA]
    │  SonC2              ParentA收到的Pathway=[SonA]
    │
    └─GrandsonA           ParentA收到的Pathway=[GrandsonA,SonA]
            GrandsonC1    ParentA收到的Pathway=[GrandsonA,SonA]
            GrandsonC2    ParentA收到的Pathway=[GrandsonA,SonA]
*/
}

message ConnectRsp {
    ConnectionInfo  InfoReq = 1;
    ConnectionInfo  InfoRsp = 2;
    int32           ErrNo   = 3;
    string          ErrMsg  = 4;
}

message DisconnectedData {
    ConnectionInfo  Info    = 1;
}

//从根节点发往叶子节点方向的通知,表达"收到通知的节点,此刻都能和root联通"
message OnlineNotice {
    bool RootIsOnline = 1;
}

//我想拿到(直属于我的那个)父亲的(缓存)数据的请求.
message ParentDataReq {
    int64                     RequestID = 1;
    google.protobuf.Timestamp ReqTime   = 2;
}

//我想拿到(直属于我的那个)父亲的(缓存)数据的响应.
message ParentDataRsp {
    int64                     RequestID = 1;
    google.protobuf.Timestamp ReqTime   = 2;
    google.protobuf.Timestamp RspTime   = 3;
    repeated ConnectReq       Data      = 4;
}

message EchoItem {
    string LocalID  = 1;
    string RemoteID = 2;
    string Data     = 3;
}

//发送邮件的项
message SendMailItem {
    string Username    = 1;
    string Password    = 2;
    string SmtpAddr    = 3;
    string To          = 4;
    string Subject     = 5;
    string ContentType = 6;
    string Content     = 7;
}

message ReportDataItem {
    string Topic = 1;//Data的主题.
    string Data  = 2;
}

message CommonErrMsg {
    string    UserID        = 1;//发现错误的用户.
    repeated string Pathway = 2;//消息的传送路径.(预留字段)
    string    Message       = 3;
}

message QueryRecordReq {
    string UserID = 1;
    int64  SeqNo  = 2;
}

message QueryRecordRsp {
    string         UserID = 1;
    int64          SeqNo  = 2;
    repeated bytes Data   = 3;//可以用slice2msg解析.
}

