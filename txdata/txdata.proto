syntax = "proto3";

package txdata;

import public "google/protobuf/timestamp.proto";

// 注意: 务必要和各结构体的序号对应起来. 校验的命令如下所示:
// Linux  : grep    "^message" txdata.proto | awk -F" " 'BEGIN{cnt=0}{print"ID_"$2,"= "cnt++";"}'
// Linux  : grep    "^message" txdata.proto
// Windows: findstr "^message" txdata.proto
// 还需要同时修改(ProtoMessage.go)和(m2b.h)
enum MsgType {
    Zero1               =  0;//第0个本该是(UniKey)
    ID_Common1Req       =  1;
    ID_Common1Rsp       =  2;
    ID_Common2Req       =  3;
    ID_Common2Rsp       =  4;
    ID_Common2Ack       =  5;
    ID_CommonErr        =  6;
    ID_ConnectionInfo   =  7;
    ID_DisconnectedData =  8;
    ID_ConnectReq       =  9;
    ID_ConnectRsp       = 10;
    ID_OnlineNotice     = 11;
    ID_SystemReport     = 12;
    ID_EchoItem         = 13;
    ID_BinItem          = 14;
    ID_EmailItem        = 15;
    ID_QryConnInfoReq   = 16;
    ID_QryConnInfoRsp   = 17;
    ID_QueryRecordReq   = 18;
    ID_QueryRecordRsp   = 19;
    ID_ExecCmdReq       = 20;
    ID_ExecCmdRsp       = 21;
    ID_PushWrap         = 22;
    ID_PushItem         = 23;
    ID_SubscribeReq     = 24;
    ID_SubscribeRsp     = 25;
}

//唯一标识一个消息.
message UniKey {
    string  UserID = 1;//用户名.
    int64   MsgNo  = 2;//消息号.
    int32   SeqNo  = 3;//同一消息的顺序号(Req+Rsp为同一消息,可1对n,Req为0,Rsp从1开始增加).
}

message Common1Req {
    int64                     MsgNo     =  1;
    int32                     SeqNo     =  2;
    int64                     BatchNo   =  3;
    int64                     RefNum    =  4;
    string                    RefText   =  5;
    string                    SenderID  =  6;
    string                    RecverID  =  7;
    bool                      ToRoot    =  8;//指代传输的方向.
    bool                      IsLog     =  9;
    bool                      IsPush    = 10;//上报(把请求发送到目的地就行了,不需要返回响应包).
    MsgType                   ReqType   = 11;
    bytes                     ReqData   = 12;
    google.protobuf.Timestamp ReqTime   = 13;
}

message Common1Rsp {
    int64                     MsgNo     =  1;
    int32                     SeqNo     =  2;
    int64                     BatchNo   =  3;
    int64                     RefNum    =  4;
    string                    RefText   =  5;
    string                    SenderID  =  6;
    string                    RecverID  =  7;
    bool                      ToRoot    =  8;
    bool                      IsLog     =  9;
    bool                      IsPush    = 10;
    MsgType                   RspType   = 11;
    bytes                     RspData   = 12;
    google.protobuf.Timestamp RspTime   = 13;
    bool                      IsLast    = 14;//最后一条响应的标志.
}

message Common2Req {
    UniKey                    Key      =  1;
    int64                     BatchNo  =  2;//批次号(预留:某消息需求同时微信报警和邮件报警,此时可以让两个消息号映射到同一个批次号)
    int64                     RefNum   =  3;//参考数字(预留).
    string                    RefText  =  4;//参考文本(预留).
    string                    SenderID =  5;//中途可能因为UpCache或ROOT而中途变化.
    string                    RecverID =  6;//一旦赋值(发送)自始至终都不会变化.
    bool                      ToRoot   =  7;
    bool                      IsLog    =  8;
    bool                      IsSafe   =  9;//续传.
    bool                      IsPush   = 10;//上报(把请求发送到目的地就行了,不需要返回响应包).
    bool                      UpCache  = 11;//最先收到本条数据的节点,负有缓存本条数据的义务.
    MsgType                   ReqType  = 12;
    bytes                     ReqData  = 13;
    google.protobuf.Timestamp ReqTime  = 14;
}

//可能出现的情况:SERVER收到了请求结构体,但是解析请求结构体失败,然后不知道怎么赋值响应结构体,便可使用(CommonErr)返回具体错误.
message Common2Rsp {
    UniKey                    Key      =  1;
    int64                     BatchNo  =  2;
    int64                     RefNum   =  3;
    string                    RefText  =  4;
    string                    SenderID =  5;//中途可能因为UpCache或ROOT而中途变化.
    string                    RecverID =  6;//一旦赋值(发送)自始至终都不会变化.
    bool                      ToRoot   =  7;
    bool                      IsLog    =  8;
    bool                      IsSafe   =  9;
    bool                      IsPush   = 10;
    bool                      UpCache  = 11;//最先收到本条数据的节点,负有缓存本条数据的义务.
    MsgType                   RspType  = 12;
    bytes                     RspData  = 13;
    google.protobuf.Timestamp RspTime  = 14;
    bool                      IsLast   = 15;//最后一条响应的标志.
}

//对某消息进行确认.
message Common2Ack {
    UniKey                    Key      = 1;
    string                    SenderID = 2;//消息的发送者.
    string                    RecverID = 3;//消息的接收者.
    bool                      ToRoot   = 4;//传输到ROOT(当前的传输方向,是往ROOT的方向进行传输).
    bool                      IsLog    = 5;//对本消息打日志.
}

//常用于(Common1Req)和(Common1Rsp)和(Common2Req)和(Common2Rsp)的通信过程中.
message CommonErr {
    int32  ErrNo  = 1;
    string ErrMsg = 2;
}

message ConnectionInfo {
    enum LinkType {
        Zero2   = 0;
        CONNECT = 1; //以client的身份,connect到server,建立起来的连接.
        ACCEPT  = 2; //以server的身份,accept,建立起来的连接.
    }
    string   UserID   = 1;//为空表示ROOT节点.
    string   BelongID = 2;//为空表示ROOT节点.
    string   Version  = 3;//版本号
    LinkType LinkMode = 4;//连接方向
    int32    ExePid   = 5;//进程ID
    string   ExePath  = 6;//程序路径
    string   Remark   = 7;//备注
}

message DisconnectedData {
    ConnectionInfo  Info    = 1;
}

message ConnectReq {
    ConnectionInfo  InfoReq = 1;
    repeated string Pathway = 2;//两者之间要按顺序走哪些AGENT
/* ParentA:(父亲agent), ParentC1:(父亲client1), SonA:(儿子agent), GrandsonA:(孙子agent)
ParentA
│  ParentC1               ParentA收到的Pathway=[]
│  ParentC2               ParentA收到的Pathway=[]
│
└─SonA                    ParentA收到的Pathway=[SonA]
    │  SonC1              ParentA收到的Pathway=[SonA]
    │  SonC2              ParentA收到的Pathway=[SonA]
    │
    └─GrandsonA           ParentA收到的Pathway=[GrandsonA,SonA]
            GrandsonC1    ParentA收到的Pathway=[GrandsonA,SonA]
            GrandsonC2    ParentA收到的Pathway=[GrandsonA,SonA]
*/
}

message ConnectRsp {
    ConnectionInfo InfoReq = 1;
    ConnectionInfo InfoRsp = 2;
    int32          ErrNo   = 3;
    string         ErrMsg  = 4;
}

//从(根节点)发往(叶子节点)方向的通知,表达"收到通知的节点,此刻都能和ROOT连通"
message OnlineNotice {
    bool RootIsOnline = 1;
}

//发往(根节点)方向的通知/报告.
message SystemReport {
    int32           Level   = 1;//消息的等级.
    string          UserID  = 2;//消息的发送者.
    repeated string Pathway = 3;//消息的传送路径(预留字段)
    string          Message = 4;
}

message EchoItem {
    string Data   = 1;
    int32  RspCnt = 2;//要返回几个响应.
    int32  SecGap = 3;//响应间隔多少秒.
}

//二进制(想传啥就传啥)
message BinItem {
    int32          Type = 1;
    repeated bytes Data = 2;
}

message EmailItem {
    string Username    = 1;
    string Password    = 2;
    string SmtpAddr    = 3;
    string To          = 4;
    string Subject     = 5;
    string ContentType = 6;
    string Content     = 7;
}

message QryConnInfoReq {
}

message QryConnInfoRsp {
    string                  UserID = 1;//查询了哪个用户.
    map<string, ConnectReq> Cache  = 2;//该用户的缓存.
}

//从ROOT查询记录的请求.
message QueryRecordReq {
    string         UserID = 1;//要查询的用户.
    int64          SeqNo  = 2;//要查询的编号.
}

//从ROOT查询记录的响应.
message QueryRecordRsp {
    string         UserID = 1;
    int64          SeqNo  = 2;
    repeated bytes Data   = 3;//可以用slice2msg解析.
}

//执行命令的请求.
message ExecCmdReq {
    string Cmd   = 1;
}

//执行命令的响应.
message ExecCmdRsp {
    string Reply = 1;
}

//推送用途的包装器.
//建议仅使用(Common1Req)发送推送消息,因为它没有缓存机制.
message PushWrap {
    int64                     MsgNo   = 1; //建议留空,因为(推送服务的节点)会自行分配.
    string                    UserID  = 2;//建议留空,因为(推送服务的节点)会自行修正.
    google.protobuf.Timestamp MsgTime = 3;//建议留空,因为,如果默认值,(推送服务的节点)会填写接收时刻.
    MsgType                   MsgType   = 11;
    bytes                     MsgData   = 12;//消息内容.
}

/*
推送：
谁发的
啥时候发的
大概内容是什么
详细内容是什么 */
message PushItem {
    string Subject = 1;//主题.
    string Content = 2;//内容.
    int32  Level   = 3;//预留字段.
}

message SubscribeReq {
    int64  FromMsgNo = 1;
}

message SubscribeRsp {
    int64  FromMsgNo = 1;
    int32  ErrNo     = 2;
    string ErrMsg    = 3;
}
