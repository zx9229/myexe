syntax = "proto3";

package txdata;

import public "google/protobuf/timestamp.proto";

// 注意: 务必要和各结构体的序号对应起来. 校验的命令如下所示:
// Linux  : grep    "^message" txdata.proto | awk -F" " 'BEGIN{cnt=0}{print"ID_"$2,"= "cnt++";"}'
// Linux  : grep    "^message" txdata.proto
// Windows: findstr "^message" txdata.proto
enum MsgType {
    Zero1               =  0;//第0个本该是UniKey.
    ID_MessageAck       =  1;
    ID_CommonReq        =  2;
    ID_CommonRsp        =  3;
    ID_CommonErr        =  4;
    ID_ConnectionInfo   =  5;
    ID_ConnectReq       =  6;
    ID_ConnectRsp       =  7;
    ID_DisconnectedData =  8;
    ID_OnlineNotice     =  9;
    ID_CommonErrMsg     = 10;
    ID_QueryRecordReq   = 11;
    ID_QueryRecordRsp   = 12;
    ID_ExecCmdReq       = 13;
    ID_ExecCmdRsp       = 14;
    ID_EchoItem         = 15;
    ID_ReportDataItem   = 16;
    ID_SendMailItem     = 17;
}

//一个占位符结构体.
message UniKey {
    string  UserID = 1;//用户名.
    int64   MsgNo  = 2;//消息号.
    int32   SeqNo  = 3;//同一消息的顺序号(Req+Rsp为同一消息,可1对n,Req为0,Rsp从1开始增加).
}

message MessageAck {
    UniKey  Key         = 1;//对该消息进行确认.
    string  SenderID    = 2;//消息的发送者.
    string  RecverID    = 3;//消息的接收者.
    bool    TxToRoot    = 4;//传输到ROOT(当前的传输方向,是往ROOT的方向进行传输).
}

message CommonReq {
    UniKey                    Key         = 1;
    string                    SenderID    = 2;//可能因为UpCache或ROOT而中途变化.
    string                    RecverID    = 3;//一旦赋值(发送)自始至终都不会变化.
    bool                      TxToRoot    = 4;
    bool                      UpCache     = 5;//最先收到本条数据的节点,负有缓存本条数据的义务.
    MsgType                   ReqType     = 6;
    bytes                     ReqData     = 7;
    google.protobuf.Timestamp ReqTime     = 8;//预留字段.
}

//(FromServer==true && ErrNo!=0)的一个情况举例:SERVER收到了请求结构体,但是解析请求结构体失败,然后不知道怎么赋值响应结构体,便为ErrNo赋值.
message CommonRsp {
    UniKey                    Key         =  1;
    string                    SenderID    =  2;//中途可能变化.
    string                    RecverID    =  3;//一旦赋值(发送)自始至终都不会变化.
    bool                      TxToRoot    =  4;
    bool                      UpCache     =  5;//最先收到本条数据的节点,负有缓存本条数据的义务.
    MsgType                   RspType     =  6;
    bytes                     RspData     =  7;
    google.protobuf.Timestamp RspTime     =  8;//预留字段.
    bool                      IsLast      =  9;//最后一条响应的标志.
  //int32                     ErrNo       = 10;//废弃.
  //string                    ErrMsg      = 11;//废弃.
}

//常用于CommonReq和CommonRsp的通信过程中.
message CommonErr {
    int32                     ErrNo       = 1;
    string                    ErrMsg      = 2;
}

message ConnectionInfo {
    enum LinkType {
        Zero3   = 0;
        CONNECT = 1; //以client的身份,connect到server,建立起来的连接.
        ACCEPT  = 2; //以server的身份,accept,建立起来的连接.
    }
    string    UserID    = 1;//为空表示ROOT节点.
    string    BelongID  = 2;//为空表示ROOT节点.
    string    Version   = 3;//版本号
    LinkType  LinkMode  = 4;//连接方向
    int32     ExePid    = 5;//进程ID
    string    ExePath   = 6;//程序路径
    string    Remark    = 7;//备注
}

message ConnectReq {
    ConnectionInfo  InfoReq = 1;
    repeated string Pathway = 2;//两者之间要按顺序走哪些AGENT
/* ParentA:(父亲agent), ParentC1:(父亲client1), SonA:(儿子agent), GrandsonA:(孙子agent)
ParentA
│  ParentC1               ParentA收到的Pathway=[]
│  ParentC2               ParentA收到的Pathway=[]
│
└─SonA                    ParentA收到的Pathway=[SonA]
    │  SonC1              ParentA收到的Pathway=[SonA]
    │  SonC2              ParentA收到的Pathway=[SonA]
    │
    └─GrandsonA           ParentA收到的Pathway=[GrandsonA,SonA]
            GrandsonC1    ParentA收到的Pathway=[GrandsonA,SonA]
            GrandsonC2    ParentA收到的Pathway=[GrandsonA,SonA]
*/
}

message ConnectRsp {
    ConnectionInfo  InfoReq = 1;
    ConnectionInfo  InfoRsp = 2;
    int32           ErrNo   = 3;
    string          ErrMsg  = 4;
}

message DisconnectedData {
    ConnectionInfo  Info    = 1;
}

//从根节点发往叶子节点方向的通知,表达"收到通知的节点,此刻都能和root联通"
message OnlineNotice {
    bool RootIsOnline = 1;
}

//TODO:待改名;系统异常情况报告.
message CommonErrMsg {
    string    UserID        = 1;//发现错误的用户.
    repeated string Pathway = 2;//消息的传送路径.(预留字段)
    string    Message       = 3;
}

//从ROOT查询记录的请求.
message QueryRecordReq {
    string         UserID = 1;//要查询的用户.
    int64          SeqNo  = 2;//要查询的编号.
}

//从ROOT查询记录的响应.
message QueryRecordRsp {
    string         UserID = 1;
    int64          SeqNo  = 2;
    repeated bytes Data   = 3;//可以用slice2msg解析.
}

//执行命令的请求.
message ExecCmdReq {
    string Cmd      = 1;
}

//执行命令的响应.
message ExecCmdRsp {
    string Reply    = 1;
    int32  ReplyIdx = 2;
    bool   IsLast   = 3;
}

message EchoItem {
    string LocalID  = 1;
    string RemoteID = 2;
    string Data     = 3;
}

message ReportDataItem {
    string Topic = 1;//Data的主题.
    string Data  = 2;
}

//发送邮件的项
message SendMailItem {
    string Username    = 1;
    string Password    = 2;
    string SmtpAddr    = 3;
    string To          = 4;
    string Subject     = 5;
    string ContentType = 6;
    string Content     = 7;
}
